// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`WorkflowValueDescriptorReferenceObject > should generate correct AST for BINARY_EXPRESSION 1`] = `
"BinaryWorkflowExpression(
    lhs=WorkflowStateVariableWorkflowReference(value="Hello"),
    rhs=WorkflowStateVariableWorkflowReference(value="World"),
    operator=LogicalOperator.COALESCE,
)
"
`;

exports[`WorkflowValueDescriptorReferenceObject > should generate correct AST for CONSTANT_VALUE reference 1`] = `
"WorkflowStateVariableWorkflowReference(value="Hello, World!")
"
`;

exports[`WorkflowValueDescriptorReferenceObject > should generate correct AST for EXECUTION_COUNTER reference 1`] = `
"ExecutionCounterWorkflowReference(node_id="search")
"
`;

exports[`WorkflowValueDescriptorReferenceObject > should generate correct AST for NODE_OUTPUT reference 1`] = `
"NodeOutputWorkflowReference(node_id="test-node-id", node_output_id="test-output-id")
"
`;

exports[`WorkflowValueDescriptorReferenceObject > should generate correct AST for TERNARY_EXPRESSION 1`] = `
"TernaryWorkflowExpression(
    base=WorkflowStateVariableWorkflowReference(value=5),
    lhs=WorkflowStateVariableWorkflowReference(value=1),
    rhs=WorkflowStateVariableWorkflowReference(value=10),
    operator=LogicalOperator.COALESCE,
)
"
`;

exports[`WorkflowValueDescriptorReferenceObject > should generate correct AST for UNARY_EXPRESSION 1`] = `
"UnaryWorkflowExpression(
    lhs=WorkflowStateVariableWorkflowReference(value="Hello, World!"),
    operator=LogicalOperator.COALESCE,
)
"
`;

exports[`WorkflowValueDescriptorReferenceObject > should generate correct AST for VELLUM_SECRET reference 1`] = `
"VellumSecretWorkflowReference(vellum_secret_name="API_KEY")
"
`;

exports[`WorkflowValueDescriptorReferenceObject > should generate correct AST for WORKFLOW_INPUT reference 1`] = `
"WorkflowInputWorkflowReference(input_variable_id="test-input-id")
"
`;

exports[`WorkflowValueDescriptorReferenceObject > should generate correct AST for WORKFLOW_STATE reference 1`] = `
"WorkflowStateVariableWorkflowReference(state_variable_id="test-state-id")
"
`;

exports[`WorkflowValueDescriptorReferenceObject > should generate correct AST for nested BINARY_EXPRESSION with 4 node outputs 1`] = `
"BinaryWorkflowExpression(
    lhs=BinaryWorkflowExpression(
        lhs=BinaryWorkflowExpression(
            lhs=NodeOutputWorkflowReference(
                node_id="node-id-1", node_output_id="output-id-1"
            ),
            rhs=NodeOutputWorkflowReference(
                node_id="node-id-2", node_output_id="output-id-2"
            ),
            operator=LogicalOperator.COALESCE,
        ),
        rhs=NodeOutputWorkflowReference(
            node_id="node-id-3", node_output_id="output-id-3"
        ),
        operator=LogicalOperator.COALESCE,
    ),
    rhs=NodeOutputWorkflowReference(node_id="node-id-4", node_output_id="output-id-4"),
    operator=LogicalOperator.COALESCE,
)
"
`;
