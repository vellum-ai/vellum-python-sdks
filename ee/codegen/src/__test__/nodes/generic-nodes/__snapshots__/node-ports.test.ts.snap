// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`NodePorts > basic > generates correct ports class 1`] = `
"class Ports(BaseNode.Ports):
    if_port = Port.on_if(Inputs.count.is_null())
    else_port = Port.on_else()
"
`;

exports[`NodePorts > basic duplicate port names > handles duplicate port names correctly 1`] = `
"class Ports(BaseNode.Ports):
    same_port_name = Port.on_if("test-value-1")
    same_port_name_1 = Port.on_elif("test-value-2")
    unique_name = Port.on_else()
"
`;

exports[`NodePorts > basic with nested expression in port > generates correct ports class 1`] = `
"class Ports(BaseNode.Ports):
    if_port = Port.on_if(Inputs.count.is_null())
    elif_port = Port.on_elif(
        TestNode.Outputs.my_output.equals("expected-value").equals(
            "another-expected-value"
        )
    )
    else_port = Port.on_else()
"
`;

exports[`NodePorts > empty expression for if port > generates correct ports class 1`] = `
"class Ports(BaseNode.Ports):
    my_if_port = Port.on_if(None)
    else_port = Port.on_else()
"
`;

exports[`NodePorts > nested binary expression with AND operator > generates correct ports class with nested AND operator 1`] = `
"class Ports(BaseNode.Ports):
    if_port = Port.on_if(Inputs.count.greater_than(10) & (Inputs.count.less_than(100)))
    else_port = Port.on_else()
"
`;

exports[`NodePorts > nested binary expression with OR operator > generates correct ports class with nested OR operator 1`] = `
"class Ports(BaseNode.Ports):
    if_port = Port.on_if(
        TestNode.Outputs.my_output.equals("first-value") | (Inputs.count.equals(42))
    )
    else_port = Port.on_else()
"
`;
