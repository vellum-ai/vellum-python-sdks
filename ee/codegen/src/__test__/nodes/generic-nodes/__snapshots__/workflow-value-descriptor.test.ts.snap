// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`WorkflowValueDescriptor > expressions > generates binary expression with nested workflow value descriptors 1`] = `
"TestNode.Outputs.my_output.equals("expected-value").equals("another-expected-value")
"
`;

exports[`WorkflowValueDescriptor > expressions > generates binary expression with node output and constant 1`] = `
"TestNode.Outputs.my_output.equals("expected-value")
"
`;

exports[`WorkflowValueDescriptor > expressions > generates ternary expression with input variables 1`] = `
"Inputs.count.between(1, 10)
"
`;

exports[`WorkflowValueDescriptor > expressions > generates unary expression with input variable 1`] = `
"Inputs.count.is_null()
"
`;

exports[`WorkflowValueDescriptor > expressions that begin with constant values > generates binary expression with in operator and string array 1`] = `
""test" in [
    "test",
    "other",
]
"
`;

exports[`WorkflowValueDescriptor > expressions that begin with constant values > generates binary expression with lhs of number and rhs of number 1`] = `
"5 == 500
"
`;

exports[`WorkflowValueDescriptor > expressions that begin with constant values > generates binary expression with lhs of string and rhs of string 1`] = `
""Hello, World!" == "Hello, World!"
"
`;

exports[`WorkflowValueDescriptor > expressions that begin with constant values > generates binary expression with not equals operator and numbers 1`] = `
"5 != 10
"
`;

exports[`WorkflowValueDescriptor > expressions that begin with constant values > generates binary expression with not in operator and string array 1`] = `
""test" not in [
    "test",
    "other",
]
"
`;

exports[`WorkflowValueDescriptor > expressions that begin with constant values > generates ternary expression with between operator and numbers 1`] = `
"1 <= 5 <= 10
"
`;

exports[`WorkflowValueDescriptor > expressions that begin with constant values > generates ternary expression with not between operator and numbers 1`] = `
"5 < 1 or 5 > 10
"
`;

exports[`WorkflowValueDescriptor > expressions that begin with constant values > generates unary expression with lhs of string 1`] = `
""Hello, World!" is None
"
`;
