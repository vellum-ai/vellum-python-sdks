// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`WorkflowValueDescriptor > expressions > generates binary expression with nested workflow value descriptors 1`] = `
"TestNode.Outputs.my_output.equals("expected-value").equals("another-expected-value")
"
`;

exports[`WorkflowValueDescriptor > expressions > generates binary expression with node output and constant 1`] = `
"TestNode.Outputs.my_output.equals("expected-value")
"
`;

exports[`WorkflowValueDescriptor > expressions > generates ternary expression with input variables 1`] = `
"Inputs.count.between(1, 10)
"
`;

exports[`WorkflowValueDescriptor > expressions > generates unary expression with constant value for parse_json 1`] = `
"ConstantValueReference('{"key": "value"}').parse_json()
"
`;

exports[`WorkflowValueDescriptor > expressions > generates unary expression with input variable 1`] = `
"Inputs.count.is_null()
"
`;

exports[`WorkflowValueDescriptor > expressions > generates unary expression with is_error operator 1`] = `
"TestNode.Outputs.my_output.is_error()
"
`;

exports[`WorkflowValueDescriptor > expressions that begin with constant values > generates binary expression beginning with constant value reference 1`] = `
"ConstantValueReference("Hello, World!").equals(Inputs.count)
"
`;

exports[`WorkflowValueDescriptor > expressions that begin with constant values > generates ternary expression beginning with constant value reference 1`] = `
"ConstantValueReference(123).between(Inputs.count, Inputs.another_count)
"
`;

exports[`WorkflowValueDescriptor > expressions that begin with constant values > generates unary expression beginning with constant value reference 1`] = `
"ConstantValueReference("Hello, World!").is_null()
"
`;

exports[`WorkflowValueDescriptor > expressions that begin with constant values > generates unary expression with is_error operator on constant value 1`] = `
"ConstantValueReference("Some error message").is_error()
"
`;
