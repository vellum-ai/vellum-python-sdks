// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`GenericNode > basic > getNodeDisplayFile 1`] = `
"from uuid import UUID

from vellum_ee.workflows.display.editor import NodeDisplayData, NodeDisplayPosition
from vellum_ee.workflows.display.nodes import BaseNodeDisplay
from vellum_ee.workflows.display.nodes.types import (
    NodeOutputDisplay,
    PortDisplayOverrides,
)

from ...nodes.my_custom_node import MyCustomNode


class MyCustomNodeDisplay(BaseNodeDisplay[MyCustomNode]):
    label = "MyCustomNode"
    node_id = UUID("9dc95b5d-1467-4b17-abb0-449d1aac6aec")
    attribute_ids_by_name = {
        "default-attribute": UUID("990d55db-9d72-452a-b074-9bee1f89ecb9"),
        "default-attribute-2": UUID("70652383-d93f-4c3a-b194-1ea5cdced8f1"),
    }
    output_display = {
        MyCustomNode.Outputs.output: NodeOutputDisplay(
            id=UUID("output-1"), name="output"
        )
    }
    port_displays = {
        MyCustomNode.Ports.default_port: PortDisplayOverrides(
            id=UUID("2544f9e4-d6e6-4475-b6a9-13393115d77c")
        )
    }
    display_data = NodeDisplayData(
        position=NodeDisplayPosition(x=0, y=0), z_index=None, width=None, height=None
    )
"
`;

exports[`GenericNode > basic > getNodeFile 1`] = `
"from vellum.workflows.nodes import BaseNode
from vellum.workflows.types.core import MergeBehavior

from ..inputs import Inputs


class MyCustomNode(BaseNode):
    default_attribute = "default-value"
    default_attribute_2 = Inputs.count

    class Outputs(BaseNode.Outputs):
        output = "default-value"

    class Trigger(BaseNode.Trigger):
        merge_behavior = MergeBehavior.AWAIT_ALL
"
`;

exports[`GenericNode > basic with a JSON output > getNodeFile 1`] = `
"from typing import Any

from vellum.workflows.nodes import BaseNode


class MyCustomNode(BaseNode):
    class Outputs(BaseNode.Outputs):
        output: Any
"
`;

exports[`GenericNode > basic with adornments > getNodeDisplayFile 1`] = `
"from uuid import UUID

from vellum_ee.workflows.display.editor import NodeDisplayData, NodeDisplayPosition
from vellum_ee.workflows.display.nodes import (
    BaseMapNodeDisplay,
    BaseNodeDisplay,
    BaseRetryNodeDisplay,
    BaseTryNodeDisplay,
)
from vellum_ee.workflows.display.nodes.types import (
    NodeOutputDisplay,
    PortDisplayOverrides,
)

from ...nodes.my_custom_node import MyCustomNode


@BaseTryNodeDisplay.wrap(node_id=UUID("adornment-1"))
@BaseMapNodeDisplay.wrap(node_id=UUID("adornment-2"))
@BaseRetryNodeDisplay.wrap(node_id=UUID("adornment-3"))
class MyCustomNodeDisplay(BaseNodeDisplay[MyCustomNode]):
    label = "MyCustomNode"
    node_id = UUID("75ce71d3-d50b-4c8f-9b38-eee8c8362a92")
    attribute_ids_by_name = {
        "default-attribute": UUID("990d55db-9d72-452a-b074-9bee1f89ecb9"),
        "default-attribute-2": UUID("70652383-d93f-4c3a-b194-1ea5cdced8f1"),
    }
    output_display = {
        MyCustomNode.Outputs.output: NodeOutputDisplay(
            id=UUID("output-1"), name="output"
        )
    }
    port_displays = {
        MyCustomNode.Ports.default_port: PortDisplayOverrides(
            id=UUID("2544f9e4-d6e6-4475-b6a9-13393115d77c")
        )
    }
    display_data = NodeDisplayData(
        position=NodeDisplayPosition(x=0, y=0), z_index=None, width=None, height=None
    )
"
`;

exports[`GenericNode > basic with adornments > getNodeFile 1`] = `
"from vellum.workflows.nodes import BaseNode
from vellum.workflows.nodes.core.map_node.node import MapNode
from vellum.workflows.nodes.core.retry_node.node import RetryNode
from vellum.workflows.nodes.core.try_node.node import TryNode
from vellum.workflows.types.core import MergeBehavior

from ..inputs import Inputs


@TryNode.wrap(on_error_code="USER_DEFINED_ERROR")
@MapNode.wrap(items=[1, 2])
@RetryNode.wrap(max_attempts=3)
class MyCustomNode(BaseNode):
    default_attribute = "default-value"
    default_attribute_2 = Inputs.count

    class Outputs(BaseNode.Outputs):
        output = "default-value"

    class Trigger(BaseNode.Trigger):
        merge_behavior = MergeBehavior.AWAIT_ALL
"
`;

exports[`GenericNode > basic with custom base > getNodeFile 1`] = `
"from path.to.mock_networking_client import MockNetworkingClient

from vellum.workflows.types.core import MergeBehavior

from ..inputs import Inputs


class MyCustomNode(MockNetworkingClient):
    default_attribute = "default-value"
    default_attribute_2 = Inputs.count

    class Outputs(MockNetworkingClient.Outputs):
        output = "default-value"

    class Trigger(MockNetworkingClient.Trigger):
        merge_behavior = MergeBehavior.AWAIT_ALL
"
`;

exports[`GenericNode > basic with custom, same module, base > getNodeFile 1`] = `
"from vellum.workflows.types.core import MergeBehavior

from .mock_networking_client import MockNetworkingClient


class MyCustomNode(MockNetworkingClient):
    class Outputs(MockNetworkingClient.Outputs):
        output = "default-value"

    class Trigger(MockNetworkingClient.Trigger):
        merge_behavior = MergeBehavior.AWAIT_ALL
"
`;

exports[`GenericNode > basic with default node trigger > getNodeFile 1`] = `
"from vellum.workflows.nodes import BaseNode

from ..inputs import Inputs


class MyCustomNode(BaseNode):
    default_attribute = "default-value"
    default_attribute_2 = Inputs.count

    class Outputs(BaseNode.Outputs):
        output = "default-value"
"
`;

exports[`GenericNode > basic with environment variable reference as attribute > getNodeFile 1`] = `
"from vellum.workflows.nodes import BaseNode
from vellum.workflows.references import EnvironmentVariableReference
from vellum.workflows.types.core import MergeBehavior


class TestEnvironmentVariableNode(BaseNode):
    api_key_attribute = EnvironmentVariableReference(name="API_KEY")

    class Outputs(BaseNode.Outputs):
        output = "default-value"

    class Trigger(BaseNode.Trigger):
        merge_behavior = MergeBehavior.AWAIT_ALL
"
`;

exports[`GenericNode > basic with generic node output as attribute > getNodeFile 1`] = `
"from vellum.workflows.nodes import BaseNode
from vellum.workflows.types.core import MergeBehavior

from .my_custom_node import ReferencedNode


class MyCustomNode(BaseNode):
    default_attribute = ReferencedNode.Outputs.output

    class Outputs(BaseNode.Outputs):
        output = "default-value"

    class Trigger(BaseNode.Trigger):
        merge_behavior = MergeBehavior.AWAIT_ALL
"
`;

exports[`GenericNode > basic with invalid blank unary expression > should handle null LHS in blank expression gracefully 1`] = `
"from vellum.workflows.nodes import BaseNode
from vellum.workflows.references.constant import ConstantValueReference
from vellum.workflows.types.core import MergeBehavior


class TestBlankNode(BaseNode):
    blank_attribute = ConstantValueReference(None).is_blank()

    class Outputs(BaseNode.Outputs):
        output = "default-value"

    class Trigger(BaseNode.Trigger):
        merge_behavior = MergeBehavior.AWAIT_ALL
"
`;

exports[`GenericNode > basic with invalid coalesce binary expression > should handle null LHS in coalesce expression gracefully 1`] = `
"from vellum.workflows.nodes import BaseNode
from vellum.workflows.references.constant import ConstantValueReference
from vellum.workflows.types.core import MergeBehavior


class TestCoalesceNode(BaseNode):
    coalesce_attribute = ConstantValueReference(None).coalesce("fallback_value")

    class Outputs(BaseNode.Outputs):
        output = "default-value"

    class Trigger(BaseNode.Trigger):
        merge_behavior = MergeBehavior.AWAIT_ALL
"
`;

exports[`GenericNode > basic with invalid notBlank unary expression > should handle null LHS in notBlank expression gracefully 1`] = `
"from vellum.workflows.nodes import BaseNode
from vellum.workflows.references.constant import ConstantValueReference
from vellum.workflows.types.core import MergeBehavior


class TestNotBlankNode(BaseNode):
    not_blank_attribute = ConstantValueReference(None).is_not_blank()

    class Outputs(BaseNode.Outputs):
        output = "default-value"

    class Trigger(BaseNode.Trigger):
        merge_behavior = MergeBehavior.AWAIT_ALL
"
`;

exports[`GenericNode > basic with node output as attribute > getNodeDisplayFile 1`] = `
"from uuid import UUID

from vellum_ee.workflows.display.editor import NodeDisplayData, NodeDisplayPosition
from vellum_ee.workflows.display.nodes import BaseNodeDisplay
from vellum_ee.workflows.display.nodes.types import (
    NodeOutputDisplay,
    PortDisplayOverrides,
)

from ...nodes.my_custom_node import MyCustomNode


class MyCustomNodeDisplay(BaseNodeDisplay[MyCustomNode]):
    label = "MyCustomNode"
    node_id = UUID("bed8d22e-4835-41d9-ad81-e78a4b0e7ae0")
    attribute_ids_by_name = {"default-attribute": UUID("attr-1-id")}
    output_display = {
        MyCustomNode.Outputs.output: NodeOutputDisplay(
            id=UUID("output-1"), name="output"
        )
    }
    port_displays = {
        MyCustomNode.Ports.default_port: PortDisplayOverrides(
            id=UUID("2544f9e4-d6e6-4475-b6a9-13393115d77c")
        )
    }
    display_data = NodeDisplayData(
        position=NodeDisplayPosition(x=0, y=0), z_index=None, width=None, height=None
    )
"
`;

exports[`GenericNode > basic with node output as attribute > getNodeFile 1`] = `
"from vellum.workflows.nodes import BaseNode
from vellum.workflows.types.core import MergeBehavior

from .prompt_node import PromptNode


class MyCustomNode(BaseNode):
    default_attribute = PromptNode.Outputs.text

    class Outputs(BaseNode.Outputs):
        output = "default-value"

    class Trigger(BaseNode.Trigger):
        merge_behavior = MergeBehavior.AWAIT_ALL
"
`;

exports[`GenericNode > basic with only \`pass\` > getNodeFile 1`] = `
"from vellum.workflows.nodes import BaseNode


class MyCustomNode(BaseNode):
    pass
"
`;

exports[`GenericNode > basic with with access field in ports > getNodeFile 1`] = `
"from vellum.workflows.nodes import BaseNode
from vellum.workflows.ports import Port
from vellum.workflows.references.constant import ConstantValueReference
from vellum.workflows.types.core import MergeBehavior

from ..inputs import Inputs


class MyCustomNode(BaseNode):
    default_attribute = "default-value"
    default_attribute_2 = Inputs.count

    class Outputs(BaseNode.Outputs):
        output = "default-value"

    class Ports(BaseNode.Ports):
        access = Port.on_if(
            ConstantValueReference(
                {
                    "foo": "bar",
                }
            )["foo"]
        )

    class Trigger(BaseNode.Trigger):
        merge_behavior = MergeBehavior.AWAIT_ALL
"
`;

exports[`GenericNode > basic without node outputs should skip node outputs class > getNodeFile 1`] = `
"from vellum.workflows.nodes import BaseNode
from vellum.workflows.types.core import MergeBehavior

from ..inputs import Inputs


class MyCustomNode(BaseNode):
    default_attribute = "default-value"
    default_attribute_2 = Inputs.count

    class Trigger(BaseNode.Trigger):
        merge_behavior = MergeBehavior.AWAIT_ALL
"
`;
