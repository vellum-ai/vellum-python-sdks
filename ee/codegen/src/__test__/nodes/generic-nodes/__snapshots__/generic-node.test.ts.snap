// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`GenericNode > basic > getNodeDisplayFile 1`] = `
"from uuid import UUID

from vellum_ee.workflows.display.editor import NodeDisplayData, NodeDisplayPosition
from vellum_ee.workflows.display.nodes import BaseNodeDisplay
from vellum_ee.workflows.display.nodes.types import PortDisplayOverrides

from ...nodes.my_custom_node import MyCustomNode


class MyCustomNodeDisplay(BaseNodeDisplay[MyCustomNode]):
    port_displays = {
        MyCustomNode.Ports.default_port: PortDisplayOverrides(
            id=UUID("2544f9e4-d6e6-4475-b6a9-13393115d77c")
        )
    }
    display_data = NodeDisplayData(
        position=NodeDisplayPosition(x=0, y=0), width=None, height=None
    )
"
`;

exports[`GenericNode > basic > getNodeFile 1`] = `
"from vellum.workflows.nodes import BaseNode

from ..inputs import Inputs


class MyCustomNode(BaseNode):
    default_attribute = "default-value"
    default_attribute_2 = Inputs.count

    class NodeTrigger(BaseNode.Trigger):
        merge_behavior = "AWAIT_ALL"

    class Outputs(BaseNode.Outputs):
        output = "default-value"
"
`;

exports[`GenericNode > basic with adornments > getNodeDisplayFile 1`] = `
"from uuid import UUID

from vellum_ee.workflows.display.editor import NodeDisplayData, NodeDisplayPosition
from vellum_ee.workflows.display.nodes import (
    BaseMapNodeDisplay,
    BaseNodeDisplay,
    BaseRetryNodeDisplay,
    BaseTryNodeDisplay,
)
from vellum_ee.workflows.display.nodes.types import PortDisplayOverrides

from ...nodes.my_custom_node import MyCustomNode


@BaseTryNodeDisplay.wrap(node_id=UUID("adornment-1"))
@BaseMapNodeDisplay.wrap(node_id=UUID("adornment-2"))
@BaseRetryNodeDisplay.wrap(node_id=UUID("adornment-3"))
class MyCustomNodeDisplay(BaseNodeDisplay[MyCustomNode]):
    port_displays = {
        MyCustomNode.Ports.default_port: PortDisplayOverrides(
            id=UUID("2544f9e4-d6e6-4475-b6a9-13393115d77c")
        )
    }
    display_data = NodeDisplayData(
        position=NodeDisplayPosition(x=0, y=0), width=None, height=None
    )
"
`;

exports[`GenericNode > basic with adornments > getNodeFile 1`] = `
"from vellum.workflows.nodes import BaseNode
from vellum.workflows.nodes.core.map_node.node import MapNode
from vellum.workflows.nodes.core.retry_node.node import RetryNode
from vellum.workflows.nodes.core.try_node.node import TryNode

from ..inputs import Inputs


@TryNode.wrap(on_error_code="USER_DEFINED_ERROR")
@MapNode.wrap(items=[1, 2])
@RetryNode.wrap(max_attempts=3)
class MyCustomNode(BaseNode):
    default_attribute = "default-value"
    default_attribute_2 = Inputs.count

    class NodeTrigger(BaseNode.Trigger):
        merge_behavior = "AWAIT_ALL"

    class Outputs(BaseNode.Outputs):
        output = "default-value"
"
`;

exports[`GenericNode > basic with custom base > getNodeFile 1`] = `
"from path.to.mock_networking_client import MockNetworkingClient

from ..inputs import Inputs


class MyCustomNode(MockNetworkingClient):
    default_attribute = "default-value"
    default_attribute_2 = Inputs.count

    class NodeTrigger(MockNetworkingClient.Trigger):
        merge_behavior = "AWAIT_ALL"

    class Outputs(MockNetworkingClient.Outputs):
        output = "default-value"
"
`;

exports[`GenericNode > basic with default node trigger > getNodeFile 1`] = `
"from vellum.workflows.nodes import BaseNode

from ..inputs import Inputs


class MyCustomNode(BaseNode):
    default_attribute = "default-value"
    default_attribute_2 = Inputs.count

    class Outputs(BaseNode.Outputs):
        output = "default-value"
"
`;

exports[`GenericNode > basic with generic node output as attribute > getNodeFile 1`] = `
"from vellum.workflows.nodes import BaseNode

from .my_custom_node import ReferencedNode


class MyCustomNode(BaseNode):
    default_attribute = ReferencedNode.Outputs.output

    class NodeTrigger(BaseNode.Trigger):
        merge_behavior = "AWAIT_ALL"

    class Outputs(BaseNode.Outputs):
        output = "default-value"
"
`;

exports[`GenericNode > basic with node output as attribute > getNodeDisplayFile 1`] = `
"from uuid import UUID

from vellum_ee.workflows.display.editor import NodeDisplayData, NodeDisplayPosition
from vellum_ee.workflows.display.nodes import BaseNodeDisplay
from vellum_ee.workflows.display.nodes.types import PortDisplayOverrides

from ...nodes.my_custom_node import MyCustomNode


class MyCustomNodeDisplay(BaseNodeDisplay[MyCustomNode]):
    port_displays = {
        MyCustomNode.Ports.default_port: PortDisplayOverrides(
            id=UUID("2544f9e4-d6e6-4475-b6a9-13393115d77c")
        )
    }
    display_data = NodeDisplayData(
        position=NodeDisplayPosition(x=0, y=0), width=None, height=None
    )
"
`;

exports[`GenericNode > basic with node output as attribute > getNodeFile 1`] = `
"from vellum.workflows.nodes import BaseNode

from .prompt_node import PromptNode


class MyCustomNode(BaseNode):
    default_attribute = PromptNode.Outputs.text

    class NodeTrigger(BaseNode.Trigger):
        merge_behavior = "AWAIT_ALL"

    class Outputs(BaseNode.Outputs):
        output = "default-value"
"
`;

exports[`GenericNode > basic with with access field in ports > getNodeFile 1`] = `
"from vellum.workflows.nodes import BaseNode
from vellum.workflows.ports import Port
from vellum.workflows.references.constant import ConstantValueReference

from ..inputs import Inputs


class MyCustomNode(BaseNode):
    default_attribute = "default-value"
    default_attribute_2 = Inputs.count

    class NodeTrigger(BaseNode.Trigger):
        merge_behavior = "AWAIT_ALL"

    class Outputs(BaseNode.Outputs):
        output = "default-value"

    class Ports(BaseNode.Ports):
        access = Port.on_if(
            ConstantValueReference(
                {
                    "foo": "bar",
                }
            )["foo"]
        )
"
`;

exports[`GenericNode > basic without node outputs should skip node outputs class > getNodeFile 1`] = `
"from vellum.workflows.nodes import BaseNode

from ..inputs import Inputs


class MyCustomNode(BaseNode):
    default_attribute = "default-value"
    default_attribute_2 = Inputs.count

    class NodeTrigger(BaseNode.Trigger):
        merge_behavior = "AWAIT_ALL"
"
`;
