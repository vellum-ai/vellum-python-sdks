// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`GenericNode > basic > getNodeDisplayFile 1`] = `
"from vellum_ee.workflows.display.nodes import BaseNodeDisplay
from ...nodes.my_custom_node import MyCustomNode
from vellum_ee.workflows.display.vellum import NodeDisplayData, NodeDisplayPosition


class MyCustomNodeDisplay(BaseNodeDisplay[MyCustomNode]):
    node_input_ids_by_name = {}
    display_data = NodeDisplayData(
        position=NodeDisplayPosition(x=0, y=0), width=None, height=None
    )
"
`;

exports[`GenericNode > basic > getNodeFile 1`] = `
"from vellum.workflows.nodes import BaseNode
from ..inputs import Inputs


class MyCustomNode(BaseNode):
    default_attribute = "default-value"
    default_attribute_2 = Inputs.count

    class NodeTrigger(BaseNode.Trigger):
        merge_behavior = "AWAIT_ALL"

    class Outputs(BaseNode.Outputs):
        output = "default-value"
"
`;

exports[`GenericNode > basic with adornments > getNodeDisplayFile 1`] = `
"from vellum_ee.workflows.display.nodes import BaseNodeDisplay
from ...nodes.my_custom_node import MyCustomNode
from vellum_ee.workflows.display.vellum import NodeDisplayData, NodeDisplayPosition


class MyCustomNodeDisplay(BaseNodeDisplay[MyCustomNode]):
    node_input_ids_by_name = {}
    display_data = NodeDisplayData(
        position=NodeDisplayPosition(x=0, y=0), width=None, height=None
    )
"
`;

exports[`GenericNode > basic with adornments > getNodeFile 1`] = `
"from vellum.workflows.nodes import BaseNode
from vellum.workflows.nodes.core import TryNode
from vellum.workflows.nodes.core.map_node.node import MapNode
from ..inputs import Inputs


@TryNode.wrap(max_attempts=3)
@MapNode.wrap(items=[1, 2])
class MyCustomNode(BaseNode):
    default_attribute = "default-value"
    default_attribute_2 = Inputs.count

    class NodeTrigger(BaseNode.Trigger):
        merge_behavior = "AWAIT_ALL"

    class Outputs(BaseNode.Outputs):
        output = "default-value"
"
`;

exports[`GenericNode > basic with generic node output as attribute > getNodeFile 1`] = `
"from vellum.workflows.nodes import BaseNode
from .my_custom_node import ReferencedNode


class MyCustomNode(BaseNode):
    default_attribute = ReferencedNode.Outputs.output

    class NodeTrigger(BaseNode.Trigger):
        merge_behavior = "AWAIT_ALL"

    class Outputs(BaseNode.Outputs):
        output = "default-value"
"
`;

exports[`GenericNode > basic with node output as attribute > getNodeDisplayFile 1`] = `
"from vellum_ee.workflows.display.nodes import BaseNodeDisplay
from ...nodes.my_custom_node import MyCustomNode
from vellum_ee.workflows.display.vellum import NodeDisplayData, NodeDisplayPosition


class MyCustomNodeDisplay(BaseNodeDisplay[MyCustomNode]):
    node_input_ids_by_name = {}
    display_data = NodeDisplayData(
        position=NodeDisplayPosition(x=0, y=0), width=None, height=None
    )
"
`;

exports[`GenericNode > basic with node output as attribute > getNodeFile 1`] = `
"from vellum.workflows.nodes import BaseNode
from .prompt_node import PromptNode


class MyCustomNode(BaseNode):
    default_attribute = PromptNode.Outputs.text

    class NodeTrigger(BaseNode.Trigger):
        merge_behavior = "AWAIT_ALL"

    class Outputs(BaseNode.Outputs):
        output = "default-value"
"
`;
