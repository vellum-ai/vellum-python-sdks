// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Conditional Node with numeric operator casts rhs to NUMBER > getNodeFile 1`] = `
"from vellum.workflows.nodes.displayable import ConditionalNode as BaseConditionalNode
from vellum.workflows.ports import Port

from ..inputs import Inputs


class ConditionalNode(BaseConditionalNode):
    class Ports(BaseConditionalNode.Ports):
        branch_1 = Port.on_if(Inputs.rhs.greater_than(0.5))
"
`;

exports[`ConditionalNode > getNodeDisplayFile 1`] = `
"from uuid import UUID

from vellum_ee.workflows.display.nodes import BaseConditionalNodeDisplay
from vellum_ee.workflows.display.nodes.vellum.conditional_node import (
    ConditionId,
    RuleIdMap,
)
from vellum_ee.workflows.display.vellum import NodeDisplayData, NodeDisplayPosition

from ...nodes.conditional_node import ConditionalNode


class ConditionalNodeDisplay(BaseConditionalNodeDisplay[ConditionalNode]):
    label = "Conditional Node"
    node_id = UUID("b81a4453-7b80-41ea-bd55-c62df8878fd3")
    target_handle_id = UUID("842b9dda-7977-47ad-a322-eb15b4c7069d")
    source_handle_ids = {
        0: UUID("63345ab5-1a4d-48a1-ad33-91bec41f92a5"),
        1: UUID("2c03f27f-ea64-42fc-8a6c-383550c58ae4"),
        2: UUID("14a8b603-6039-4491-92d4-868a4dae4c15"),
    }
    rule_ids = [
        RuleIdMap(
            id="fa50fb0c-8d62-40e3-bd88-080b52efd4b2",
            lhs=RuleIdMap(
                id="ad6bcb67-f21b-4af9-8d4b-ac8d3ba297cc",
                lhs=None,
                rhs=None,
                field_node_input_id=None,
                value_node_input_id=None,
            ),
            rhs=None,
            field_node_input_id=None,
            value_node_input_id=None,
        ),
        RuleIdMap(
            id="fa50fb0c-8d62-40e3-bd88-080b52efd4b2",
            lhs=RuleIdMap(
                id="ad6bcb67-f21b-4af9-8d4b-ac8d3ba297cc",
                lhs=None,
                rhs=None,
                field_node_input_id=None,
                value_node_input_id=None,
            ),
            rhs=None,
            field_node_input_id=None,
            value_node_input_id=None,
        ),
    ]
    condition_ids = [
        ConditionId(
            id="8d0d8b56-6c17-4684-9f16-45dd6ce23060",
            rule_group_id="fa50fb0c-8d62-40e3-bd88-080b52efd4b2",
        ),
        ConditionId(
            id="e63c3933-ef86-451f-88bc-d7ea7dce4310",
            rule_group_id="fa50fb0c-8d62-40e3-bd88-080b52efd4b2",
        ),
        ConditionId(id="ea63ccd5-3fe3-4371-ba3c-6d3ec7ca2b60", rule_group_id=None),
    ]
    node_input_ids_by_name = {
        "ad6bcb67-f21b-4af9-8d4b-ac8d3ba297cc.field": UUID(
            "2cb6582e-c329-4952-8598-097830b766c7"
        ),
        "ad6bcb67-f21b-4af9-8d4b-ac8d3ba297cc.value": UUID(
            "cf63d0ad-5e52-4031-a29f-922e7004cdd8"
        ),
    }
    port_displays = {}
    display_data = NodeDisplayData(
        position=NodeDisplayPosition(x=2247.2797390213086, y=30.917121251477084),
        width=480,
        height=180,
    )
"
`;

exports[`ConditionalNode > getNodeFile 1`] = `
"from vellum.workflows.nodes.displayable import ConditionalNode as BaseConditionalNode
from vellum.workflows.ports import Port

from ..inputs import Inputs


class ConditionalNode(BaseConditionalNode):
    class Ports(BaseConditionalNode.Ports):
        branch_1 = Port.on_if(Inputs.field.equals("testtest"))
        branch_2 = Port.on_elif(Inputs.field.is_not_null())
        branch_3 = Port.on_else()
"
`;

exports[`ConditionalNode with invalid uuid for field and value node input ids > getNodeDisplayFile 1`] = `
"from uuid import UUID

from vellum_ee.workflows.display.nodes import BaseConditionalNodeDisplay
from vellum_ee.workflows.display.nodes.vellum.conditional_node import (
    ConditionId,
    RuleIdMap,
)
from vellum_ee.workflows.display.vellum import NodeDisplayData, NodeDisplayPosition

from ...nodes.conditional_node import ConditionalNode


class ConditionalNodeDisplay(BaseConditionalNodeDisplay[ConditionalNode]):
    label = "Conditional Node"
    node_id = UUID("b81a4453-7b80-41ea-bd55-c62df8878fd3")
    target_handle_id = UUID("842b9dda-7977-47ad-a322-eb15b4c7069d")
    source_handle_ids = {
        0: UUID("63345ab5-1a4d-48a1-ad33-91bec41f92a5"),
        1: UUID("14a8b603-6039-4491-92d4-868a4dae4c15"),
    }
    rule_ids = [
        RuleIdMap(
            id="fa50fb0c-8d62-40e3-bd88-080b52efd4b2",
            lhs=RuleIdMap(
                id="ad6bcb67-f21b-4af9-8d4b-ac8d3ba297cc",
                lhs=None,
                rhs=None,
                field_node_input_id=None,
                value_node_input_id=None,
            ),
            rhs=None,
            field_node_input_id=None,
            value_node_input_id=None,
        )
    ]
    condition_ids = [
        ConditionId(
            id="8d0d8b56-6c17-4684-9f16-45dd6ce23060",
            rule_group_id="fa50fb0c-8d62-40e3-bd88-080b52efd4b2",
        ),
        ConditionId(id="ea63ccd5-3fe3-4371-ba3c-6d3ec7ca2b60", rule_group_id=None),
    ]
    node_input_ids_by_name = {
        "2cb6582e-c329-4952-8598-097830b766c7|cf63d0ad-5e52-4031-a29f-922e7004cdd8": "2cb6582e-c329-4952-8598-097830b766c7|cf63d0ad-5e52-4031-a29f-922e7004cdd8",
        "b51eb7cd-3e0a-4b42-a269-d58ebc3e0b04|51315413-f47c-4d7e-bc94-bd9e7862043d": "b51eb7cd-3e0a-4b42-a269-d58ebc3e0b04|51315413-f47c-4d7e-bc94-bd9e7862043d",
    }
    port_displays = {}
    display_data = NodeDisplayData(
        position=NodeDisplayPosition(x=2247.2797390213086, y=30.917121251477084),
        width=480,
        height=180,
    )
"
`;

exports[`ConditionalNode with invalid uuid for field and value node input ids > getNodeFile 1`] = `
"from vellum.workflows.nodes.displayable import ConditionalNode as BaseConditionalNode
from vellum.workflows.ports import Port

from ..inputs import Inputs


class ConditionalNode(BaseConditionalNode):
    class Ports(BaseConditionalNode.Ports):
        branch_1 = Port.on_if(Inputs.field.equals(Inputs.field))
        branch_2 = Port.on_else()
"
`;

exports[`ConditionalNode with null operator > getNodeDisplayFile 1`] = `
"from uuid import UUID

from vellum_ee.workflows.display.nodes import BaseConditionalNodeDisplay
from vellum_ee.workflows.display.nodes.vellum.conditional_node import (
    ConditionId,
    RuleIdMap,
)
from vellum_ee.workflows.display.vellum import NodeDisplayData, NodeDisplayPosition

from ...nodes.conditional_node import ConditionalNode


class ConditionalNodeDisplay(BaseConditionalNodeDisplay[ConditionalNode]):
    label = "Conditional Node"
    node_id = UUID("b81a4453-7b80-41ea-bd55-c62df8878fd3")
    target_handle_id = UUID("842b9dda-7977-47ad-a322-eb15b4c7069d")
    source_handle_ids = {0: UUID("63345ab5-1a4d-48a1-ad33-91bec41f92a5")}
    rule_ids = [
        RuleIdMap(
            id="fa50fb0c-8d62-40e3-bd88-080b52efd4b2",
            lhs=RuleIdMap(
                id="ad6bcb67-f21b-4af9-8d4b-ac8d3ba297cc",
                lhs=None,
                rhs=None,
                field_node_input_id=None,
                value_node_input_id=None,
            ),
            rhs=RuleIdMap(
                id="ad6bcb67-f21b-4af9-8d4b-ac8d3ba297cd",
                lhs=None,
                rhs=None,
                field_node_input_id=None,
                value_node_input_id=None,
            ),
            field_node_input_id=None,
            value_node_input_id=None,
        )
    ]
    condition_ids = [
        ConditionId(
            id="8d0d8b56-6c17-4684-9f16-45dd6ce23060",
            rule_group_id="fa50fb0c-8d62-40e3-bd88-080b52efd4b2",
        )
    ]
    node_input_ids_by_name = {
        "ad6bcb67-f21b-4af9-8d4b-ac8d3ba297cc.field": UUID(
            "2cb6582e-c329-4952-8598-097830b766c7"
        ),
        "ad6bcb67-f21b-4af9-8d4b-ac8d3ba297cd.field": UUID(
            "2cb6582e-c329-4952-8598-097830b766c8"
        ),
    }
    port_displays = {}
    display_data = NodeDisplayData(
        position=NodeDisplayPosition(x=2247.2797390213086, y=30.917121251477084),
        width=480,
        height=180,
    )
"
`;

exports[`ConditionalNode with null operator > getNodeFile 1`] = `
"from vellum.workflows.nodes.displayable import ConditionalNode as BaseConditionalNode
from vellum.workflows.ports import Port

from ..inputs import Inputs
from .templating_node import TemplatingNode


class ConditionalNode(BaseConditionalNode):
    class Ports(BaseConditionalNode.Ports):
        branch_1 = Port.on_if(
            Inputs.field.is_null() and TemplatingNode.Outputs.result.is_nil()
        )
"
`;
