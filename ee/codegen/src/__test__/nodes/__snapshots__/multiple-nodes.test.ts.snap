// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`GuardrailNode with score output as type STRING referenced by Conditional Node > getNodeFile 1`] = `
"from vellum.workflows.nodes.displayable import ConditionalNode as BaseConditionalNode
from vellum.workflows.ports import Port

from .guardrail_node import GuardrailNode


class ConditionalNode(BaseConditionalNode):
    class Ports(BaseConditionalNode.Ports):
        if_1 = Port.on_if(GuardrailNode.Outputs.score.equals(1))
        else_1 = Port.on_else()
"
`;

exports[`Inline Subworkflow Try adornment referenced by Conditional Node > getNodeFile 1`] = `
"from vellum.workflows.nodes.displayable import ConditionalNode as BaseConditionalNode
from vellum.workflows.ports import Port

from .subworkflow_with_try import SubworkflowWithTry


class ConditionalNode(BaseConditionalNode):
    class Ports(BaseConditionalNode.Ports):
        if_1 = Port.on_if(SubworkflowWithTry.Outputs.error.equals("testtest"))
        else_1 = Port.on_else()
"
`;

exports[`InlinePromptNode json output referenced by TemplatingNode > getNodeFile 1`] = `
"from vellum.workflows.nodes.displayable import TemplatingNode as BaseTemplatingNode
from vellum.workflows.state import BaseState

from .prompt_node import PromptNode


class TemplatingNode(BaseTemplatingNode[BaseState, str]):
    template = """{{ output[0].type }}"""
    inputs = {
        "var_1": PromptNode.Outputs.json,
    }
"
`;

exports[`InlinePromptNode referenced by Conditional Node > getNodeDisplayFile 1`] = `
"from uuid import UUID

from vellum_ee.workflows.display.editor import NodeDisplayData, NodeDisplayPosition
from vellum_ee.workflows.display.nodes import BaseConditionalNodeDisplay
from vellum_ee.workflows.display.nodes.vellum.conditional_node import (
    ConditionId,
    RuleIdMap,
)

from ...nodes.conditional_node import ConditionalNode


class ConditionalNodeDisplay(BaseConditionalNodeDisplay[ConditionalNode]):
    label = "Conditional Node"
    node_id = UUID("b81a4453-7b80-41ea-bd55-c62df8878fd3")
    target_handle_id = UUID("842b9dda-7977-47ad-a322-eb15b4c7069d")
    source_handle_ids = {
        0: UUID("63345ab5-1a4d-48a1-ad33-91bec41f92a5"),
        1: UUID("14a8b603-6039-4491-92d4-868a4dae4c15"),
    }
    rule_ids = [
        RuleIdMap(
            id="fa50fb0c-8d62-40e3-bd88-080b52efd4b2",
            lhs=RuleIdMap(
                id="ad6bcb67-f21b-4af9-8d4b-ac8d3ba297cc",
                lhs=None,
                rhs=None,
                field_node_input_id=None,
                value_node_input_id=None,
            ),
            rhs=None,
            field_node_input_id=None,
            value_node_input_id=None,
        )
    ]
    condition_ids = [
        ConditionId(
            id="8d0d8b56-6c17-4684-9f16-45dd6ce23060",
            rule_group_id="fa50fb0c-8d62-40e3-bd88-080b52efd4b2",
        ),
        ConditionId(id="ea63ccd5-3fe3-4371-ba3c-6d3ec7ca2b60", rule_group_id=None),
    ]
    node_input_ids_by_name = {
        "ad6bcb67-f21b-4af9-8d4b-ac8d3ba297cc.field": UUID(
            "2cb6582e-c329-4952-8598-097830b766c7"
        ),
        "ad6bcb67-f21b-4af9-8d4b-ac8d3ba297cc.value": UUID(
            "cf63d0ad-5e52-4031-a29f-922e7004cdd8"
        ),
    }
    port_displays = {}
    display_data = NodeDisplayData(
        position=NodeDisplayPosition(x=2247.2797390213086, y=30.917121251477084),
        width=480,
        height=180,
    )
"
`;

exports[`InlinePromptNode referenced by Conditional Node > getNodeFile 1`] = `
"from vellum.workflows.nodes.displayable import ConditionalNode as BaseConditionalNode
from vellum.workflows.ports import Port

from .prompt_node import PromptNode


class ConditionalNode(BaseConditionalNode):
    class Ports(BaseConditionalNode.Ports):
        if_1 = Port.on_if(PromptNode.Outputs.error.equals("testtest"))
        else_1 = Port.on_else()
"
`;

exports[`InlinePromptNode referenced by Templating Node > getNodeDisplayFile 1`] = `
"from uuid import UUID

from vellum_ee.workflows.display.editor import NodeDisplayData, NodeDisplayPosition
from vellum_ee.workflows.display.nodes import BaseTemplatingNodeDisplay
from vellum_ee.workflows.display.nodes.types import (
    NodeOutputDisplay,
    PortDisplayOverrides,
)

from ...nodes.templating_node import TemplatingNode


class TemplatingNodeDisplay(BaseTemplatingNodeDisplay[TemplatingNode]):
    label = "Templating Node"
    node_id = UUID("46e221ab-a749-41a2-9242-b1f5bf31f3a5")
    target_handle_id = UUID("3960c8e1-9baa-4b9c-991d-e399d16a45aa")
    node_input_ids_by_name = {
        "inputs.text": UUID("9feb7b5e-5947-496d-b56f-1e2627730796"),
        "template": UUID("7b8af68b-cf60-4fca-9c57-868042b5b616"),
    }
    output_display = {
        TemplatingNode.Outputs.result: NodeOutputDisplay(
            id=UUID("2d4f1826-de75-499a-8f84-0a690c8136ad"), name="result"
        )
    }
    port_displays = {
        TemplatingNode.Ports.default: PortDisplayOverrides(
            id=UUID("6ee2c814-d0a5-4ec9-83b6-45156e2f22c4")
        )
    }
    display_data = NodeDisplayData(
        position=NodeDisplayPosition(x=0, y=0), width=None, height=None
    )
"
`;

exports[`InlinePromptNode referenced by Templating Node > getNodeFile 1`] = `
"from vellum.workflows.nodes.displayable import TemplatingNode as BaseTemplatingNode
from vellum.workflows.state import BaseState

from .prompt_node import PromptNode


class TemplatingNode(BaseTemplatingNode[BaseState, str]):
    template = """{{ output[0].type }}"""
    inputs = {
        "text": PromptNode.Outputs.text,
    }
"
`;

exports[`InlinePromptNode with prompt inputs generating lazy reference > getNodeFile generates lazy reference 1`] = `
"from vellum import JinjaPromptBlock, PromptParameters
from vellum.workflows.nodes.displayable import InlinePromptNode
from vellum.workflows.references import LazyReference


class PromptNode(InlinePromptNode):
    ml_model = "gpt-4o-mini"
    blocks = [
        JinjaPromptBlock(template="""Summarize what this means {{ INPUT_VARIABLE }}"""),
    ]
    prompt_inputs = {
        "text": LazyReference("TemplatingNode.Outputs.result"),
    }
    parameters = PromptParameters(
        stop=[],
        temperature=0,
        max_tokens=1000,
        top_p=1,
        top_k=0,
        frequency_penalty=0,
        presence_penalty=0,
        logit_bias={},
        custom_parameters={},
    )
"
`;

exports[`Non-existent Subworkflow Deployment Node referenced by Templating Node > getNodeDisplayFile 1`] = `
"from uuid import UUID

from vellum_ee.workflows.display.editor import NodeDisplayData, NodeDisplayPosition
from vellum_ee.workflows.display.nodes import BaseTemplatingNodeDisplay
from vellum_ee.workflows.display.nodes.types import (
    NodeOutputDisplay,
    PortDisplayOverrides,
)

from ...nodes.templating_node import TemplatingNode


class TemplatingNodeDisplay(BaseTemplatingNodeDisplay[TemplatingNode]):
    label = "Templating Node"
    node_id = UUID("46e221ab-a749-41a2-9242-b1f5bf31f3a5")
    target_handle_id = UUID("3960c8e1-9baa-4b9c-991d-e399d16a45aa")
    node_input_ids_by_name = {
        "inputs.text": UUID("9feb7b5e-5947-496d-b56f-1e2627730796"),
        "template": UUID("7b8af68b-cf60-4fca-9c57-868042b5b616"),
    }
    output_display = {
        TemplatingNode.Outputs.result: NodeOutputDisplay(
            id=UUID("2d4f1826-de75-499a-8f84-0a690c8136ad"), name="result"
        )
    }
    port_displays = {
        TemplatingNode.Ports.default: PortDisplayOverrides(
            id=UUID("6ee2c814-d0a5-4ec9-83b6-45156e2f22c4")
        )
    }
    display_data = NodeDisplayData(
        position=NodeDisplayPosition(x=0, y=0), width=None, height=None
    )
"
`;

exports[`Non-existent Subworkflow Deployment Node referenced by Templating Node > getNodeFile 1`] = `
"from vellum.workflows.nodes.displayable import TemplatingNode as BaseTemplatingNode
from vellum.workflows.state import BaseState

from .prompt_node import PromptNode


class TemplatingNode(BaseTemplatingNode[BaseState, str]):
    template = """{{ output[0].type }}"""
    inputs = {
        "text": PromptNode.Outputs.text,
    }
"
`;

exports[`Prompt Deployment Node referenced by Conditional Node > getNodeDisplayFile with 'takes array output id' 1`] = `
"from uuid import UUID

from vellum_ee.workflows.display.editor import NodeDisplayData, NodeDisplayPosition
from vellum_ee.workflows.display.nodes import BaseConditionalNodeDisplay
from vellum_ee.workflows.display.nodes.vellum.conditional_node import (
    ConditionId,
    RuleIdMap,
)

from ...nodes.conditional_node import ConditionalNode


class ConditionalNodeDisplay(BaseConditionalNodeDisplay[ConditionalNode]):
    label = "Conditional Node"
    node_id = UUID("b81a4453-7b80-41ea-bd55-c62df8878fd3")
    target_handle_id = UUID("842b9dda-7977-47ad-a322-eb15b4c7069d")
    source_handle_ids = {
        0: UUID("63345ab5-1a4d-48a1-ad33-91bec41f92a5"),
        1: UUID("14a8b603-6039-4491-92d4-868a4dae4c15"),
    }
    rule_ids = [
        RuleIdMap(
            id="fa50fb0c-8d62-40e3-bd88-080b52efd4b2",
            lhs=RuleIdMap(
                id="ad6bcb67-f21b-4af9-8d4b-ac8d3ba297cc",
                lhs=None,
                rhs=None,
                field_node_input_id=None,
                value_node_input_id=None,
            ),
            rhs=None,
            field_node_input_id=None,
            value_node_input_id=None,
        )
    ]
    condition_ids = [
        ConditionId(
            id="8d0d8b56-6c17-4684-9f16-45dd6ce23060",
            rule_group_id="fa50fb0c-8d62-40e3-bd88-080b52efd4b2",
        ),
        ConditionId(id="ea63ccd5-3fe3-4371-ba3c-6d3ec7ca2b60", rule_group_id=None),
    ]
    node_input_ids_by_name = {
        "ad6bcb67-f21b-4af9-8d4b-ac8d3ba297cc.field": UUID(
            "2cb6582e-c329-4952-8598-097830b766c7"
        ),
        "ad6bcb67-f21b-4af9-8d4b-ac8d3ba297cc.value": UUID(
            "cf63d0ad-5e52-4031-a29f-922e7004cdd8"
        ),
    }
    port_displays = {}
    display_data = NodeDisplayData(
        position=NodeDisplayPosition(x=2247.2797390213086, y=30.917121251477084),
        width=480,
        height=180,
    )
"
`;

exports[`Prompt Deployment Node referenced by Conditional Node > getNodeDisplayFile with 'takes error output id' 1`] = `
"from uuid import UUID

from vellum_ee.workflows.display.editor import NodeDisplayData, NodeDisplayPosition
from vellum_ee.workflows.display.nodes import BaseConditionalNodeDisplay
from vellum_ee.workflows.display.nodes.vellum.conditional_node import (
    ConditionId,
    RuleIdMap,
)

from ...nodes.conditional_node import ConditionalNode


class ConditionalNodeDisplay(BaseConditionalNodeDisplay[ConditionalNode]):
    label = "Conditional Node"
    node_id = UUID("b81a4453-7b80-41ea-bd55-c62df8878fd3")
    target_handle_id = UUID("842b9dda-7977-47ad-a322-eb15b4c7069d")
    source_handle_ids = {
        0: UUID("63345ab5-1a4d-48a1-ad33-91bec41f92a5"),
        1: UUID("14a8b603-6039-4491-92d4-868a4dae4c15"),
    }
    rule_ids = [
        RuleIdMap(
            id="fa50fb0c-8d62-40e3-bd88-080b52efd4b2",
            lhs=RuleIdMap(
                id="ad6bcb67-f21b-4af9-8d4b-ac8d3ba297cc",
                lhs=None,
                rhs=None,
                field_node_input_id=None,
                value_node_input_id=None,
            ),
            rhs=None,
            field_node_input_id=None,
            value_node_input_id=None,
        )
    ]
    condition_ids = [
        ConditionId(
            id="8d0d8b56-6c17-4684-9f16-45dd6ce23060",
            rule_group_id="fa50fb0c-8d62-40e3-bd88-080b52efd4b2",
        ),
        ConditionId(id="ea63ccd5-3fe3-4371-ba3c-6d3ec7ca2b60", rule_group_id=None),
    ]
    node_input_ids_by_name = {
        "ad6bcb67-f21b-4af9-8d4b-ac8d3ba297cc.field": UUID(
            "2cb6582e-c329-4952-8598-097830b766c7"
        ),
        "ad6bcb67-f21b-4af9-8d4b-ac8d3ba297cc.value": UUID(
            "cf63d0ad-5e52-4031-a29f-922e7004cdd8"
        ),
    }
    port_displays = {}
    display_data = NodeDisplayData(
        position=NodeDisplayPosition(x=2247.2797390213086, y=30.917121251477084),
        width=480,
        height=180,
    )
"
`;

exports[`Prompt Deployment Node referenced by Conditional Node > getNodeDisplayFile with 'takes output id' 1`] = `
"from uuid import UUID

from vellum_ee.workflows.display.editor import NodeDisplayData, NodeDisplayPosition
from vellum_ee.workflows.display.nodes import BaseConditionalNodeDisplay
from vellum_ee.workflows.display.nodes.vellum.conditional_node import (
    ConditionId,
    RuleIdMap,
)

from ...nodes.conditional_node import ConditionalNode


class ConditionalNodeDisplay(BaseConditionalNodeDisplay[ConditionalNode]):
    label = "Conditional Node"
    node_id = UUID("b81a4453-7b80-41ea-bd55-c62df8878fd3")
    target_handle_id = UUID("842b9dda-7977-47ad-a322-eb15b4c7069d")
    source_handle_ids = {
        0: UUID("63345ab5-1a4d-48a1-ad33-91bec41f92a5"),
        1: UUID("14a8b603-6039-4491-92d4-868a4dae4c15"),
    }
    rule_ids = [
        RuleIdMap(
            id="fa50fb0c-8d62-40e3-bd88-080b52efd4b2",
            lhs=RuleIdMap(
                id="ad6bcb67-f21b-4af9-8d4b-ac8d3ba297cc",
                lhs=None,
                rhs=None,
                field_node_input_id=None,
                value_node_input_id=None,
            ),
            rhs=None,
            field_node_input_id=None,
            value_node_input_id=None,
        )
    ]
    condition_ids = [
        ConditionId(
            id="8d0d8b56-6c17-4684-9f16-45dd6ce23060",
            rule_group_id="fa50fb0c-8d62-40e3-bd88-080b52efd4b2",
        ),
        ConditionId(id="ea63ccd5-3fe3-4371-ba3c-6d3ec7ca2b60", rule_group_id=None),
    ]
    node_input_ids_by_name = {
        "ad6bcb67-f21b-4af9-8d4b-ac8d3ba297cc.field": UUID(
            "2cb6582e-c329-4952-8598-097830b766c7"
        ),
        "ad6bcb67-f21b-4af9-8d4b-ac8d3ba297cc.value": UUID(
            "cf63d0ad-5e52-4031-a29f-922e7004cdd8"
        ),
    }
    port_displays = {}
    display_data = NodeDisplayData(
        position=NodeDisplayPosition(x=2247.2797390213086, y=30.917121251477084),
        width=480,
        height=180,
    )
"
`;

exports[`Prompt Deployment Node referenced by Conditional Node > getNodeFile with 'takes array output id' 1`] = `
"from vellum.workflows.nodes.displayable import ConditionalNode as BaseConditionalNode
from vellum.workflows.ports import Port

from .prompt_deployment_node import PromptDeploymentNode


class ConditionalNode(BaseConditionalNode):
    class Ports(BaseConditionalNode.Ports):
        if_1 = Port.on_if(PromptDeploymentNode.Outputs.results.equals("testtest"))
        else_1 = Port.on_else()
"
`;

exports[`Prompt Deployment Node referenced by Conditional Node > getNodeFile with 'takes error output id' 1`] = `
"from vellum.workflows.nodes.displayable import ConditionalNode as BaseConditionalNode
from vellum.workflows.ports import Port

from .prompt_deployment_node import PromptDeploymentNode


class ConditionalNode(BaseConditionalNode):
    class Ports(BaseConditionalNode.Ports):
        if_1 = Port.on_if(PromptDeploymentNode.Outputs.error.equals("testtest"))
        else_1 = Port.on_else()
"
`;

exports[`Prompt Deployment Node referenced by Conditional Node > getNodeFile with 'takes output id' 1`] = `
"from vellum.workflows.nodes.displayable import ConditionalNode as BaseConditionalNode
from vellum.workflows.ports import Port

from .prompt_deployment_node import PromptDeploymentNode


class ConditionalNode(BaseConditionalNode):
    class Ports(BaseConditionalNode.Ports):
        if_1 = Port.on_if(PromptDeploymentNode.Outputs.text.equals("testtest"))
        else_1 = Port.on_else()
"
`;

exports[`PromptDeploymentNode json output referenced by TemplatingNode > getNodeFile 1`] = `
"from vellum.workflows.nodes.displayable import TemplatingNode as BaseTemplatingNode
from vellum.workflows.state import BaseState

from .prompt_deployment_node import PromptDeploymentNode


class TemplatingNode(BaseTemplatingNode[BaseState, str]):
    template = """{{ var_1.type }}"""
    inputs = {
        "var_1": PromptDeploymentNode.Outputs.json,
    }
"
`;
