// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`TextSearchNode > 404 error handling > getNodeFile handles 404 error 1`] = `
"from vellum import SearchResultMergingRequest, SearchWeightsRequest
from vellum.workflows.nodes.displayable import SearchNode as BaseSearchNode
from vellum.workflows.nodes.displayable.bases.types import (
    MetadataLogicalCondition,
    MetadataLogicalConditionGroup,
    SearchFilters,
)


class SearchNode(BaseSearchNode):
    query = None
    document_index = "d5beca61-aacb-4b22-a70c-776a1e025aa4"
    limit = 8
    weights = SearchWeightsRequest(semantic_similarity=0.8, keywords=0.2)
    result_merging = SearchResultMergingRequest(enabled=True)
    filters = SearchFilters(
        external_ids=None,
        metadata=MetadataLogicalConditionGroup(
            combinator="AND",
            negated=False,
            conditions=[
                MetadataLogicalConditionGroup(
                    combinator="AND",
                    negated=False,
                    conditions=[
                        MetadataLogicalCondition(
                            lhs_variable=None, operator="=", rhs_variable=None
                        )
                    ],
                )
            ],
        ),
    )
    chunk_separator = "\\n\\n#####\\n\\n"
"
`;

exports[`TextSearchNode > basic > getNodeDisplayFile 1`] = `
"from uuid import UUID

from vellum_ee.workflows.display.editor import NodeDisplayData, NodeDisplayPosition
from vellum_ee.workflows.display.nodes import BaseSearchNodeDisplay
from vellum_ee.workflows.display.nodes.types import (
    NodeOutputDisplay,
    PortDisplayOverrides,
)

from ...nodes.search_node import SearchNode


class SearchNodeDisplay(BaseSearchNodeDisplay[SearchNode]):
    label = "Search Node"
    node_id = UUID("search")
    target_handle_id = UUID("370d712d-3369-424e-bcf7-f4da1aef3928")
    metadata_filter_input_id_by_operand_id = {
        UUID("a6322ca2-8b65-4d26-b3a1-f926dcada0fa"): UUID(
            "a6322ca2-8b65-4d26-b3a1-f926dcada0fa"
        ),
        UUID("c539a2e2-0873-43b0-ae21-81790bb1c4cb"): UUID(
            "c539a2e2-0873-43b0-ae21-81790bb1c4cb"
        ),
    }
    node_input_ids_by_name = {
        "query": UUID("f3a0d8b9-7772-4db6-8e28-f49f8c4d9e2a"),
        "document_index_id": UUID("b49bc1ab-2ad5-4cf2-8966-5cc87949900d"),
        "weights": UUID("1daf3180-4b92-472a-8665-a7703c84a94e"),
        "limit": UUID("161d264e-d04e-4c37-8e50-8bbb4c90c46e"),
        "separator": UUID("4eddefc0-90d5-422a-aec2-bc94c8f1d83c"),
        "result_merging_enabled": UUID("dc9f880b-81bc-4644-b025-8f7d5db23a48"),
        "external_id_filters": UUID("61933e79-b0c2-4e3c-bf07-e2d93b9d9c54"),
        "metadata_filters": UUID("7c43b315-d1f2-4727-9540-6cc3fd4641f3"),
        "vellum-query-builder-variable-a6322ca2-8b65-4d26-b3a1-f926dcada0fa": UUID(
            "a6322ca2-8b65-4d26-b3a1-f926dcada0fa"
        ),
        "vellum-query-builder-variable-c539a2e2-0873-43b0-ae21-81790bb1c4cb": UUID(
            "c539a2e2-0873-43b0-ae21-81790bb1c4cb"
        ),
    }
    output_display = {
        SearchNode.Outputs.results: NodeOutputDisplay(
            id=UUID("77839b3c-fe1c-4dcb-9c61-2fac827f729b"), name="results"
        ),
        SearchNode.Outputs.text: NodeOutputDisplay(
            id=UUID("d56d7c49-7b45-4933-9779-2bd7f82c2141"), name="text"
        ),
    }
    port_displays = {
        SearchNode.Ports.default: PortDisplayOverrides(
            id=UUID("e4dedb66-0638-4f0c-9941-6420bfe353b2")
        )
    }
    display_data = NodeDisplayData(position=NodeDisplayPosition(x=0, y=0))
"
`;

exports[`TextSearchNode > basic > getNodeFile 1`] = `
"from vellum import SearchResultMergingRequest, SearchWeightsRequest
from vellum.workflows.nodes.displayable import SearchNode as BaseSearchNode
from vellum.workflows.nodes.displayable.bases.types import (
    MetadataLogicalCondition,
    MetadataLogicalConditionGroup,
    SearchFilters,
)

from ..inputs import Inputs


class SearchNode(BaseSearchNode):
    query = Inputs.query
    document_index = "my-sweet-document"
    limit = 8
    weights = SearchWeightsRequest(semantic_similarity=0.8, keywords=0.2)
    result_merging = SearchResultMergingRequest(enabled=True)
    filters = SearchFilters(
        external_ids=None,
        metadata=MetadataLogicalConditionGroup(
            combinator="AND",
            negated=False,
            conditions=[
                MetadataLogicalConditionGroup(
                    combinator="AND",
                    negated=False,
                    conditions=[
                        MetadataLogicalCondition(
                            lhs_variable=Inputs.var1,
                            operator="=",
                            rhs_variable=Inputs.var1,
                        )
                    ],
                )
            ],
        ),
    )
    chunk_separator = "\\n\\n#####\\n\\n"
"
`;

exports[`TextSearchNode > limit param should cast string to int > getNodeFile 1`] = `
"from vellum import SearchResultMergingRequest, SearchWeightsRequest
from vellum.workflows.nodes.displayable import SearchNode as BaseSearchNode
from vellum.workflows.nodes.displayable.bases.types import (
    MetadataLogicalCondition,
    MetadataLogicalConditionGroup,
    SearchFilters,
)

from ..inputs import Inputs


class SearchNode(BaseSearchNode):
    query = Inputs.query
    document_index = "my-sweet-document"
    limit = 8
    weights = SearchWeightsRequest(semantic_similarity=0.8, keywords=0.2)
    result_merging = SearchResultMergingRequest(enabled=True)
    filters = SearchFilters(
        external_ids=None,
        metadata=MetadataLogicalConditionGroup(
            combinator="AND",
            negated=False,
            conditions=[
                MetadataLogicalConditionGroup(
                    combinator="AND",
                    negated=False,
                    conditions=[
                        MetadataLogicalCondition(
                            lhs_variable=Inputs.var1,
                            operator="=",
                            rhs_variable=Inputs.var1,
                        )
                    ],
                )
            ],
        ),
    )
    chunk_separator = "\\n\\n#####\\n\\n"
"
`;

exports[`TextSearchNode > metadata filters > getNodeDisplayFile 1`] = `
"from uuid import UUID

from vellum_ee.workflows.display.editor import NodeDisplayData, NodeDisplayPosition
from vellum_ee.workflows.display.nodes import BaseSearchNodeDisplay
from vellum_ee.workflows.display.nodes.types import (
    NodeOutputDisplay,
    PortDisplayOverrides,
)

from ...nodes.search_node import SearchNode


class SearchNodeDisplay(BaseSearchNodeDisplay[SearchNode]):
    label = "Search Node"
    node_id = UUID("search")
    target_handle_id = UUID("370d712d-3369-424e-bcf7-f4da1aef3928")
    metadata_filter_input_id_by_operand_id = {
        UUID("500ce391-ee26-4588-a5a0-2dfa6b70add5"): UUID(
            "500ce391-ee26-4588-a5a0-2dfa6b70add5"
        ),
        UUID("3321686c-b131-4651-a18c-3e578252abf4"): UUID(
            "3321686c-b131-4651-a18c-3e578252abf4"
        ),
        UUID("28682e34-ef0c-47fd-a32e-8228a53360b0"): UUID(
            "28682e34-ef0c-47fd-a32e-8228a53360b0"
        ),
        UUID("65a90810-f26b-4848-9c7f-29f324450e07"): UUID(
            "65a90810-f26b-4848-9c7f-29f324450e07"
        ),
        UUID("4f88fdee-4bee-40d8-a998-bbbc7255029c"): UUID(
            "4f88fdee-4bee-40d8-a998-bbbc7255029c"
        ),
    }
    node_input_ids_by_name = {
        "query": UUID("f3a0d8b9-7772-4db6-8e28-f49f8c4d9e2a"),
        "document_index_id": UUID("b49bc1ab-2ad5-4cf2-8966-5cc87949900d"),
        "weights": UUID("1daf3180-4b92-472a-8665-a7703c84a94e"),
        "limit": UUID("161d264e-d04e-4c37-8e50-8bbb4c90c46e"),
        "separator": UUID("4eddefc0-90d5-422a-aec2-bc94c8f1d83c"),
        "result_merging_enabled": UUID("dc9f880b-81bc-4644-b025-8f7d5db23a48"),
        "external_id_filters": UUID("61933e79-b0c2-4e3c-bf07-e2d93b9d9c54"),
        "metadata_filters": UUID("371f2f88-d125-4c49-9775-01aa86df2767"),
        "vellum-query-builder-variable-500ce391-ee26-4588-a5a0-2dfa6b70add5": UUID(
            "3321686c-b131-4651-a18c-3e578252abf4"
        ),
        "vellum-query-builder-variable-28682e34-ef0c-47fd-a32e-8228a53360b0": UUID(
            "65a90810-f26b-4848-9c7f-29f324450e07"
        ),
        "vellum-query-builder-variable-4f88fdee-4bee-40d8-a998-bbbc7255029c": UUID(
            "4f88fdee-4bee-40d8-a998-bbbc7255029c"
        ),
    }
    output_display = {
        SearchNode.Outputs.results: NodeOutputDisplay(
            id=UUID("77839b3c-fe1c-4dcb-9c61-2fac827f729b"), name="results"
        ),
        SearchNode.Outputs.text: NodeOutputDisplay(
            id=UUID("d56d7c49-7b45-4933-9779-2bd7f82c2141"), name="text"
        ),
    }
    port_displays = {
        SearchNode.Ports.default: PortDisplayOverrides(
            id=UUID("e4dedb66-0638-4f0c-9941-6420bfe353b2")
        )
    }
    display_data = NodeDisplayData(position=NodeDisplayPosition(x=0, y=0))
"
`;

exports[`TextSearchNode > metadata filters > getNodeFile 1`] = `
"from vellum import SearchResultMergingRequest, SearchWeightsRequest
from vellum.workflows.nodes.displayable import SearchNode as BaseSearchNode
from vellum.workflows.nodes.displayable.bases.types import (
    MetadataLogicalCondition,
    MetadataLogicalConditionGroup,
    SearchFilters,
)

from ..inputs import Inputs


class SearchNode(BaseSearchNode):
    query = Inputs.query
    document_index = "my-sweet-document"
    limit = 8
    weights = SearchWeightsRequest(semantic_similarity=0.8, keywords=0.2)
    result_merging = SearchResultMergingRequest(enabled=True)
    filters = SearchFilters(
        external_ids=None,
        metadata=MetadataLogicalConditionGroup(
            combinator="AND",
            negated=False,
            conditions=[
                MetadataLogicalCondition(
                    lhs_variable="TYPE", operator="=", rhs_variable="VENDOR"
                ),
                MetadataLogicalCondition(
                    lhs_variable="STATUS", operator="=", rhs_variable="1"
                ),
                MetadataLogicalCondition(lhs_variable="DELETED_AT", operator="null"),
            ],
        ),
    )
    chunk_separator = "\\n\\n#####\\n\\n"
"
`;

exports[`TextSearchNode > reject on error enabled > getNodeDisplayFile 1`] = `
"from uuid import UUID

from vellum_ee.workflows.display.editor import NodeDisplayData, NodeDisplayPosition
from vellum_ee.workflows.display.nodes import BaseSearchNodeDisplay, BaseTryNodeDisplay
from vellum_ee.workflows.display.nodes.types import (
    NodeOutputDisplay,
    PortDisplayOverrides,
)

from ...nodes.search_node import SearchNode


@BaseTryNodeDisplay.wrap(
    node_id=UUID("af589f73-effe-4a80-b48f-fb912ac6ce67"),
    error_output_id=UUID("af589f73-effe-4a80-b48f-fb912ac6ce67"),
)
class SearchNodeDisplay(BaseSearchNodeDisplay[SearchNode]):
    label = "Search Node"
    node_id = UUID("search")
    target_handle_id = UUID("370d712d-3369-424e-bcf7-f4da1aef3928")
    metadata_filter_input_id_by_operand_id = {
        UUID("a6322ca2-8b65-4d26-b3a1-f926dcada0fa"): UUID(
            "a6322ca2-8b65-4d26-b3a1-f926dcada0fa"
        ),
        UUID("c539a2e2-0873-43b0-ae21-81790bb1c4cb"): UUID(
            "c539a2e2-0873-43b0-ae21-81790bb1c4cb"
        ),
    }
    node_input_ids_by_name = {
        "query": UUID("f3a0d8b9-7772-4db6-8e28-f49f8c4d9e2a"),
        "document_index_id": UUID("b49bc1ab-2ad5-4cf2-8966-5cc87949900d"),
        "weights": UUID("1daf3180-4b92-472a-8665-a7703c84a94e"),
        "limit": UUID("161d264e-d04e-4c37-8e50-8bbb4c90c46e"),
        "separator": UUID("4eddefc0-90d5-422a-aec2-bc94c8f1d83c"),
        "result_merging_enabled": UUID("dc9f880b-81bc-4644-b025-8f7d5db23a48"),
        "external_id_filters": UUID("61933e79-b0c2-4e3c-bf07-e2d93b9d9c54"),
        "metadata_filters": UUID("7c43b315-d1f2-4727-9540-6cc3fd4641f3"),
        "vellum-query-builder-variable-a6322ca2-8b65-4d26-b3a1-f926dcada0fa": UUID(
            "a6322ca2-8b65-4d26-b3a1-f926dcada0fa"
        ),
        "vellum-query-builder-variable-c539a2e2-0873-43b0-ae21-81790bb1c4cb": UUID(
            "c539a2e2-0873-43b0-ae21-81790bb1c4cb"
        ),
    }
    output_display = {
        SearchNode.Outputs.results: NodeOutputDisplay(
            id=UUID("77839b3c-fe1c-4dcb-9c61-2fac827f729b"), name="results"
        ),
        SearchNode.Outputs.text: NodeOutputDisplay(
            id=UUID("d56d7c49-7b45-4933-9779-2bd7f82c2141"), name="text"
        ),
    }
    port_displays = {
        SearchNode.Ports.default: PortDisplayOverrides(
            id=UUID("e4dedb66-0638-4f0c-9941-6420bfe353b2")
        )
    }
    display_data = NodeDisplayData(position=NodeDisplayPosition(x=0, y=0))
"
`;

exports[`TextSearchNode > reject on error enabled > getNodeFile 1`] = `
"from vellum import SearchResultMergingRequest, SearchWeightsRequest
from vellum.workflows.nodes.core import TryNode
from vellum.workflows.nodes.displayable import SearchNode as BaseSearchNode
from vellum.workflows.nodes.displayable.bases.types import (
    MetadataLogicalCondition,
    MetadataLogicalConditionGroup,
    SearchFilters,
)

from ..inputs import Inputs


@TryNode.wrap()
class SearchNode(BaseSearchNode):
    query = Inputs.query
    document_index = "my-sweet-document"
    limit = 8
    weights = SearchWeightsRequest(semantic_similarity=0.8, keywords=0.2)
    result_merging = SearchResultMergingRequest(enabled=True)
    filters = SearchFilters(
        external_ids=None,
        metadata=MetadataLogicalConditionGroup(
            combinator="AND",
            negated=False,
            conditions=[
                MetadataLogicalConditionGroup(
                    combinator="AND",
                    negated=False,
                    conditions=[
                        MetadataLogicalCondition(
                            lhs_variable=Inputs.var1,
                            operator="=",
                            rhs_variable=Inputs.var1,
                        )
                    ],
                )
            ],
        ),
    )
    chunk_separator = "\\n\\n#####\\n\\n"
"
`;

exports[`TextSearchNode > should codegen successfully without document index id input > getNodeDisplayFile 1`] = `
"from uuid import UUID

from vellum_ee.workflows.display.editor import NodeDisplayData, NodeDisplayPosition
from vellum_ee.workflows.display.nodes import BaseSearchNodeDisplay
from vellum_ee.workflows.display.nodes.types import (
    NodeOutputDisplay,
    PortDisplayOverrides,
)

from ...nodes.search_node import SearchNode


class SearchNodeDisplay(BaseSearchNodeDisplay[SearchNode]):
    label = "Search Node"
    node_id = UUID("search")
    target_handle_id = UUID("370d712d-3369-424e-bcf7-f4da1aef3928")
    metadata_filter_input_id_by_operand_id = {
        UUID("a6322ca2-8b65-4d26-b3a1-f926dcada0fa"): UUID(
            "a6322ca2-8b65-4d26-b3a1-f926dcada0fa"
        ),
        UUID("c539a2e2-0873-43b0-ae21-81790bb1c4cb"): UUID(
            "c539a2e2-0873-43b0-ae21-81790bb1c4cb"
        ),
    }
    node_input_ids_by_name = {
        "query": UUID("f3a0d8b9-7772-4db6-8e28-f49f8c4d9e2a"),
        "weights": UUID("1daf3180-4b92-472a-8665-a7703c84a94e"),
        "limit": UUID("161d264e-d04e-4c37-8e50-8bbb4c90c46e"),
        "separator": UUID("4eddefc0-90d5-422a-aec2-bc94c8f1d83c"),
        "result_merging_enabled": UUID("dc9f880b-81bc-4644-b025-8f7d5db23a48"),
        "external_id_filters": UUID("61933e79-b0c2-4e3c-bf07-e2d93b9d9c54"),
        "metadata_filters": UUID("7c43b315-d1f2-4727-9540-6cc3fd4641f3"),
        "vellum-query-builder-variable-a6322ca2-8b65-4d26-b3a1-f926dcada0fa": UUID(
            "a6322ca2-8b65-4d26-b3a1-f926dcada0fa"
        ),
        "vellum-query-builder-variable-c539a2e2-0873-43b0-ae21-81790bb1c4cb": UUID(
            "c539a2e2-0873-43b0-ae21-81790bb1c4cb"
        ),
    }
    output_display = {
        SearchNode.Outputs.results: NodeOutputDisplay(
            id=UUID("77839b3c-fe1c-4dcb-9c61-2fac827f729b"), name="results"
        ),
        SearchNode.Outputs.text: NodeOutputDisplay(
            id=UUID("d56d7c49-7b45-4933-9779-2bd7f82c2141"), name="text"
        ),
    }
    port_displays = {
        SearchNode.Ports.default: PortDisplayOverrides(
            id=UUID("e4dedb66-0638-4f0c-9941-6420bfe353b2")
        )
    }
    display_data = NodeDisplayData(position=NodeDisplayPosition(x=0, y=0))
"
`;

exports[`TextSearchNode > should codegen successfully without document index id input > getNodeFile 1`] = `
"from vellum import SearchResultMergingRequest, SearchWeightsRequest
from vellum.workflows.nodes.displayable import SearchNode as BaseSearchNode
from vellum.workflows.nodes.displayable.bases.types import (
    MetadataLogicalCondition,
    MetadataLogicalConditionGroup,
    SearchFilters,
)


class SearchNode(BaseSearchNode):
    query = None
    document_index = None
    limit = 8
    weights = SearchWeightsRequest(semantic_similarity=0.8, keywords=0.2)
    result_merging = SearchResultMergingRequest(enabled=True)
    filters = SearchFilters(
        external_ids=None,
        metadata=MetadataLogicalConditionGroup(
            combinator="AND",
            negated=False,
            conditions=[
                MetadataLogicalConditionGroup(
                    combinator="AND",
                    negated=False,
                    conditions=[
                        MetadataLogicalCondition(
                            lhs_variable=None, operator="=", rhs_variable=None
                        )
                    ],
                )
            ],
        ),
    )
    chunk_separator = "\\n\\n#####\\n\\n"
"
`;

exports[`TextSearchNode > should codegen successfully without metadata filters mapped properly > LHS missing on getNodeDisplayClassBodyStatements 1`] = `
"from uuid import UUID

from vellum_ee.workflows.display.editor import NodeDisplayData, NodeDisplayPosition
from vellum_ee.workflows.display.nodes import BaseSearchNodeDisplay
from vellum_ee.workflows.display.nodes.types import (
    NodeOutputDisplay,
    PortDisplayOverrides,
)

from ...nodes.search_node import SearchNode


class SearchNodeDisplay(BaseSearchNodeDisplay[SearchNode]):
    label = "Search Node"
    node_id = UUID("search")
    target_handle_id = UUID("370d712d-3369-424e-bcf7-f4da1aef3928")
    metadata_filter_input_id_by_operand_id = {}
    node_input_ids_by_name = {
        "query": UUID("2f5bc81d-6ee8-4101-9a55-4ddeae954425"),
        "document_index_id": UUID("b49bc1ab-2ad5-4cf2-8966-5cc87949900d"),
        "weights": UUID("1daf3180-4b92-472a-8665-a7703c84a94e"),
        "limit": UUID("161d264e-d04e-4c37-8e50-8bbb4c90c46e"),
        "separator": UUID("4eddefc0-90d5-422a-aec2-bc94c8f1d83c"),
        "result_merging_enabled": UUID("dc9f880b-81bc-4644-b025-8f7d5db23a48"),
        "external_id_filters": UUID("61933e79-b0c2-4e3c-bf07-e2d93b9d9c54"),
        "metadata_filters": UUID("7c43b315-d1f2-4727-9540-6cc3fd4641f3"),
        "filters.metadata.conditions.0.lhs": UUID(
            "1237381c-2e78-4306-bd62-be8ecc900d02"
        ),
        "filters.metadata.conditions.0.rhs": UUID(
            "3c56555f-45dc-43d5-9d1c-b7cecf70cea1"
        ),
    }
    output_display = {
        SearchNode.Outputs.results: NodeOutputDisplay(
            id=UUID("77839b3c-fe1c-4dcb-9c61-2fac827f729b"), name="results"
        ),
        SearchNode.Outputs.text: NodeOutputDisplay(
            id=UUID("d56d7c49-7b45-4933-9779-2bd7f82c2141"), name="text"
        ),
    }
    port_displays = {
        SearchNode.Ports.default: PortDisplayOverrides(
            id=UUID("e4dedb66-0638-4f0c-9941-6420bfe353b2")
        )
    }
    display_data = NodeDisplayData(position=NodeDisplayPosition(x=0, y=0))
"
`;

exports[`TextSearchNode > should codegen successfully without metadata filters mapped properly > RHS missing on getNodeDisplayClassBodyStatements 1`] = `
"from uuid import UUID

from vellum_ee.workflows.display.editor import NodeDisplayData, NodeDisplayPosition
from vellum_ee.workflows.display.nodes import BaseSearchNodeDisplay
from vellum_ee.workflows.display.nodes.types import (
    NodeOutputDisplay,
    PortDisplayOverrides,
)

from ...nodes.search_node import SearchNode


class SearchNodeDisplay(BaseSearchNodeDisplay[SearchNode]):
    label = "Search Node"
    node_id = UUID("search")
    target_handle_id = UUID("370d712d-3369-424e-bcf7-f4da1aef3928")
    metadata_filter_input_id_by_operand_id = {}
    node_input_ids_by_name = {
        "query": UUID("2f5bc81d-6ee8-4101-9a55-4ddeae954425"),
        "document_index_id": UUID("b49bc1ab-2ad5-4cf2-8966-5cc87949900d"),
        "weights": UUID("1daf3180-4b92-472a-8665-a7703c84a94e"),
        "limit": UUID("161d264e-d04e-4c37-8e50-8bbb4c90c46e"),
        "separator": UUID("4eddefc0-90d5-422a-aec2-bc94c8f1d83c"),
        "result_merging_enabled": UUID("dc9f880b-81bc-4644-b025-8f7d5db23a48"),
        "external_id_filters": UUID("61933e79-b0c2-4e3c-bf07-e2d93b9d9c54"),
        "metadata_filters": UUID("7c43b315-d1f2-4727-9540-6cc3fd4641f3"),
        "filters.metadata.conditions.0.lhs": UUID(
            "9263f669-dfb4-4d69-820d-15beca7583b3"
        ),
        "filters.metadata.conditions.0.rhs": UUID(
            "3c56555f-45dc-43d5-9d1c-b7cecf70cea1"
        ),
    }
    output_display = {
        SearchNode.Outputs.results: NodeOutputDisplay(
            id=UUID("77839b3c-fe1c-4dcb-9c61-2fac827f729b"), name="results"
        ),
        SearchNode.Outputs.text: NodeOutputDisplay(
            id=UUID("d56d7c49-7b45-4933-9779-2bd7f82c2141"), name="text"
        ),
    }
    port_displays = {
        SearchNode.Ports.default: PortDisplayOverrides(
            id=UUID("e4dedb66-0638-4f0c-9941-6420bfe353b2")
        )
    }
    display_data = NodeDisplayData(position=NodeDisplayPosition(x=0, y=0))
"
`;
