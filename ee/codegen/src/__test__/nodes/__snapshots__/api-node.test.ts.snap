// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`ApiNode > basic > getNodeDisplayFile 1`] = `
"from uuid import UUID

from vellum_ee.workflows.display.nodes import BaseAPINodeDisplay
from vellum_ee.workflows.display.nodes.types import (
    NodeOutputDisplay,
    PortDisplayOverrides,
)
from vellum_ee.workflows.display.vellum import NodeDisplayData, NodeDisplayPosition

from ...nodes.api_node import APINode


class APINodeDisplay(BaseAPINodeDisplay[APINode]):
    label = "API Node"
    node_id = UUID("2cd960a3-cb8a-43ed-9e3f-f003fc480951")
    target_handle_id = UUID("06573a05-e6f0-48b9-bc6e-07e06d0bc1b1")
    url_input_id = UUID("480a4c12-22d6-4223-a38a-85db5eda118c")
    method_input_id = UUID("9bf086d4-feed-47ff-9736-a5a6aa3a11cc")
    body_input_id = UUID("74865eb7-cdaf-4d40-a499-0a6505e72680")
    authorization_type_input_id = UUID("de330dac-05b1-4e78-bee7-7452203af3d5")
    bearer_token_value_input_id = UUID("931502c1-23a5-4e2a-a75e-80736c42f3c9")
    api_key_header_key_input_id = UUID("96c8343d-cc94-4df0-9001-eb2905a00be7")
    api_key_header_value_input_id = UUID("bfc2e790-66fd-42fd-acf7-3b2c785c1a0a")
    additional_header_key_input_ids = {
        "foo": UUID("8ad006f3-d19e-4af1-931f-3e955152cd91"),
        "bar": UUID("3075be8c-248b-421d-9266-7779297be883"),
        "baz": UUID("13c2dd5e-cdd0-431b-aa91-46ad8da1cb51"),
    }
    additional_header_value_input_ids = {
        "foo": UUID("36865dca-40b4-432c-bab4-1e11bb9f4083"),
        "bar": UUID("00baaee1-b785-403d-b391-f68b3aea334f"),
        "baz": UUID("408c2b3d-7c30-4e01-a2e3-276753beadbc"),
    }
    node_input_ids_by_name = {
        "method": UUID("9bf086d4-feed-47ff-9736-a5a6aa3a11cc"),
        "url": UUID("480a4c12-22d6-4223-a38a-85db5eda118c"),
        "body": UUID("74865eb7-cdaf-4d40-a499-0a6505e72680"),
        "authorization_type": UUID("de330dac-05b1-4e78-bee7-7452203af3d5"),
        "bearer_token_value": UUID("931502c1-23a5-4e2a-a75e-80736c42f3c9"),
        "api_key_header_key": UUID("96c8343d-cc94-4df0-9001-eb2905a00be7"),
        "api_key_header_value": UUID("bfc2e790-66fd-42fd-acf7-3b2c785c1a0a"),
        "additional_header_key_1": UUID("8ad006f3-d19e-4af1-931f-3e955152cd91"),
        "additional_header_value_1": UUID("36865dca-40b4-432c-bab4-1e11bb9f4083"),
        "additional_header_key_2": UUID("3075be8c-248b-421d-9266-7779297be883"),
        "additional_header_value_2": UUID("00baaee1-b785-403d-b391-f68b3aea334f"),
        "additional_header_key_3": UUID("13c2dd5e-cdd0-431b-aa91-46ad8da1cb51"),
        "additional_header_value_3": UUID("408c2b3d-7c30-4e01-a2e3-276753beadbc"),
    }
    output_display = {
        APINode.Outputs.json: NodeOutputDisplay(
            id=UUID("af576eaa-d39d-4c19-8992-1f01a65a709a"), name="json"
        ),
        APINode.Outputs.status_code: NodeOutputDisplay(
            id=UUID("69250713-617d-42a4-9326-456c70d0ef20"), name="status_code"
        ),
        APINode.Outputs.text: NodeOutputDisplay(
            id=UUID("81b270c0-4deb-4db3-aae5-138f79531b2b"), name="text"
        ),
    }
    port_displays = {
        APINode.Ports.default: PortDisplayOverrides(
            id=UUID("c38a71f6-3ffb-45fa-9eea-93c6984a9e3e")
        )
    }
    display_data = NodeDisplayData(
        position=NodeDisplayPosition(x=2075.7067885117494, y=234.65663468515768),
        width=462,
        height=288,
    )
"
`;

exports[`ApiNode > basic > getNodeFile 1`] = `
"from vellum.workflows.constants import APIRequestMethod, AuthorizationType
from vellum.workflows.nodes.displayable import APINode as BaseAPINode


class APINode(BaseAPINode):
    url = "https://example.vellum.ai"
    method = APIRequestMethod.POST
    headers = {
        "foo": "foo-value",
        "bar": "bar-value",
        "baz": "baz-value",
    }
    api_key_header_key = None
    authorization_type = AuthorizationType.API_KEY
    api_key_header_value = "<my-api-value>"
    bearer_token_value = "<my-bearer-token>"
"
`;

exports[`ApiNode > basic api node > should generate API key header fields when API key is provided 1`] = `
"from vellum.workflows.constants import AuthorizationType
from vellum.workflows.nodes.displayable import APINode as BaseAPINode


class APINode(BaseAPINode):
    url = "https://example.vellum.ai"
    api_key_header_key = "X-API-KEY"
    authorization_type = AuthorizationType.API_KEY
    api_key_header_value = "my-api-key"
"
`;

exports[`ApiNode > basic api node > should generate all fields when all conditions are provided 1`] = `
"from vellum.workflows.constants import APIRequestMethod, AuthorizationType
from vellum.workflows.nodes.displayable import APINode as BaseAPINode


class APINode(BaseAPINode):
    url = "https://example.vellum.ai"
    method = APIRequestMethod.POST
    json = {
        "foo": "bar",
    }
    headers = {
        "Content-Type": "application/json",
    }
    api_key_header_key = "X-API-KEY"
    authorization_type = AuthorizationType.API_KEY
    api_key_header_value = "my-api-key"
"
`;

exports[`ApiNode > basic api node > should generate headers field when headers are provided 1`] = `
"from vellum.workflows.nodes.displayable import APINode as BaseAPINode


class APINode(BaseAPINode):
    url = "https://example.vellum.ai"
    headers = {
        "Content-Type": "application/json",
    }
"
`;

exports[`ApiNode > basic api node > should generate method field when method is POST 1`] = `
"from vellum.workflows.constants import APIRequestMethod
from vellum.workflows.nodes.displayable import APINode as BaseAPINode


class APINode(BaseAPINode):
    url = "https://example.vellum.ai"
    method = APIRequestMethod.POST
"
`;

exports[`ApiNode > basic api node > should not generate body field when body is empty 1`] = `
"from vellum.workflows.nodes.displayable import APINode as BaseAPINode


class APINode(BaseAPINode):
    url = "https://example.vellum.ai"
"
`;

exports[`ApiNode > basic api node > should only generate url field 1`] = `
"from vellum.workflows.nodes.displayable import APINode as BaseAPINode


class APINode(BaseAPINode):
    url = "https://example.vellum.ai"
"
`;

exports[`ApiNode > basic auth secret node > secret ids should show names 1`] = `
"from vellum.workflows.constants import APIRequestMethod, AuthorizationType
from vellum.workflows.nodes.displayable import APINode as BaseAPINode
from vellum.workflows.references import VellumSecretReference


class APINode(BaseAPINode):
    url = "https://example.vellum.ai"
    method = APIRequestMethod.POST
    headers = {
        "foo": "foo-value",
        "bar": "bar-value",
        "baz": "baz-value",
    }
    api_key_header_key = None
    authorization_type = AuthorizationType.API_KEY
    api_key_header_value = VellumSecretReference("test-secret")
    bearer_token_value = VellumSecretReference("test-secret")
"
`;

exports[`ApiNode > basic auth secret node > should generate Workspace secrets for header values 1`] = `
"from vellum.workflows.constants import APIRequestMethod, AuthorizationType
from vellum.workflows.nodes.displayable import APINode as BaseAPINode
from vellum.workflows.references import VellumSecretReference


class APINode(BaseAPINode):
    url = "https://example.vellum.ai"
    method = APIRequestMethod.POST
    headers = {
        "X-Secret-Key": VellumSecretReference("test-secret"),
    }
    api_key_header_key = None
    authorization_type = AuthorizationType.API_KEY
    api_key_header_value = "<my-api-value>"
    bearer_token_value = "<my-bearer-token>"
"
`;

exports[`ApiNode > reject on error enabled > getNodeDisplayFile 1`] = `
"from uuid import UUID

from vellum_ee.workflows.display.nodes import BaseAPINodeDisplay, BaseTryNodeDisplay
from vellum_ee.workflows.display.nodes.types import (
    NodeOutputDisplay,
    PortDisplayOverrides,
)
from vellum_ee.workflows.display.vellum import NodeDisplayData, NodeDisplayPosition

from ...nodes.api_node import APINode


@BaseTryNodeDisplay.wrap(error_output_id=UUID("af589f73-effe-4a80-b48f-fb912ac6ce67"))
class APINodeDisplay(BaseAPINodeDisplay[APINode]):
    label = "API Node"
    node_id = UUID("2cd960a3-cb8a-43ed-9e3f-f003fc480951")
    target_handle_id = UUID("06573a05-e6f0-48b9-bc6e-07e06d0bc1b1")
    url_input_id = UUID("480a4c12-22d6-4223-a38a-85db5eda118c")
    method_input_id = UUID("9bf086d4-feed-47ff-9736-a5a6aa3a11cc")
    body_input_id = UUID("74865eb7-cdaf-4d40-a499-0a6505e72680")
    authorization_type_input_id = UUID("de330dac-05b1-4e78-bee7-7452203af3d5")
    bearer_token_value_input_id = UUID("931502c1-23a5-4e2a-a75e-80736c42f3c9")
    api_key_header_key_input_id = UUID("96c8343d-cc94-4df0-9001-eb2905a00be7")
    api_key_header_value_input_id = UUID("bfc2e790-66fd-42fd-acf7-3b2c785c1a0a")
    additional_header_key_input_ids = {
        "foo": UUID("8ad006f3-d19e-4af1-931f-3e955152cd91"),
        "bar": UUID("3075be8c-248b-421d-9266-7779297be883"),
        "baz": UUID("13c2dd5e-cdd0-431b-aa91-46ad8da1cb51"),
    }
    additional_header_value_input_ids = {
        "foo": UUID("36865dca-40b4-432c-bab4-1e11bb9f4083"),
        "bar": UUID("00baaee1-b785-403d-b391-f68b3aea334f"),
        "baz": UUID("408c2b3d-7c30-4e01-a2e3-276753beadbc"),
    }
    node_input_ids_by_name = {
        "method": UUID("9bf086d4-feed-47ff-9736-a5a6aa3a11cc"),
        "url": UUID("480a4c12-22d6-4223-a38a-85db5eda118c"),
        "body": UUID("74865eb7-cdaf-4d40-a499-0a6505e72680"),
        "authorization_type": UUID("de330dac-05b1-4e78-bee7-7452203af3d5"),
        "bearer_token_value": UUID("931502c1-23a5-4e2a-a75e-80736c42f3c9"),
        "api_key_header_key": UUID("96c8343d-cc94-4df0-9001-eb2905a00be7"),
        "api_key_header_value": UUID("bfc2e790-66fd-42fd-acf7-3b2c785c1a0a"),
        "additional_header_key_1": UUID("8ad006f3-d19e-4af1-931f-3e955152cd91"),
        "additional_header_value_1": UUID("36865dca-40b4-432c-bab4-1e11bb9f4083"),
        "additional_header_key_2": UUID("3075be8c-248b-421d-9266-7779297be883"),
        "additional_header_value_2": UUID("00baaee1-b785-403d-b391-f68b3aea334f"),
        "additional_header_key_3": UUID("13c2dd5e-cdd0-431b-aa91-46ad8da1cb51"),
        "additional_header_value_3": UUID("408c2b3d-7c30-4e01-a2e3-276753beadbc"),
    }
    output_display = {
        APINode.Outputs.json: NodeOutputDisplay(
            id=UUID("af576eaa-d39d-4c19-8992-1f01a65a709a"), name="json"
        ),
        APINode.Outputs.status_code: NodeOutputDisplay(
            id=UUID("69250713-617d-42a4-9326-456c70d0ef20"), name="status_code"
        ),
        APINode.Outputs.text: NodeOutputDisplay(
            id=UUID("81b270c0-4deb-4db3-aae5-138f79531b2b"), name="text"
        ),
    }
    port_displays = {
        APINode.Ports.default: PortDisplayOverrides(
            id=UUID("c38a71f6-3ffb-45fa-9eea-93c6984a9e3e")
        )
    }
    display_data = NodeDisplayData(
        position=NodeDisplayPosition(x=2075.7067885117494, y=234.65663468515768),
        width=462,
        height=288,
    )
"
`;

exports[`ApiNode > reject on error enabled > getNodeFile 1`] = `
"from vellum.workflows.constants import APIRequestMethod, AuthorizationType
from vellum.workflows.nodes.core import TryNode
from vellum.workflows.nodes.displayable import APINode as BaseAPINode


@TryNode.wrap()
class APINode(BaseAPINode):
    url = "https://example.vellum.ai"
    method = APIRequestMethod.POST
    headers = {
        "foo": "foo-value",
        "bar": "bar-value",
        "baz": "baz-value",
    }
    api_key_header_key = None
    authorization_type = AuthorizationType.API_KEY
    api_key_header_value = "<my-api-value>"
    bearer_token_value = "<my-bearer-token>"
"
`;

exports[`ApiNode > skip authorization type input id field if undefined > getNodeFile 1`] = `
"from vellum.workflows.constants import APIRequestMethod
from vellum.workflows.nodes.displayable import APINode as BaseAPINode


class APINode(BaseAPINode):
    url = "https://example.vellum.ai"
    method = APIRequestMethod.POST
    headers = {
        "foo": "foo-value",
        "bar": "bar-value",
        "baz": "baz-value",
    }
    api_key_header_key = None
"
`;

exports[`ApiNode > skip bearer token if secret not found > getNodeFile 1`] = `
"from vellum.workflows.constants import APIRequestMethod, AuthorizationType
from vellum.workflows.nodes.displayable import APINode as BaseAPINode
from vellum.workflows.references import VellumSecretReference


class APINode(BaseAPINode):
    url = "https://example.vellum.ai"
    method = APIRequestMethod.POST
    headers = {
        "foo": "foo-value",
        "bar": "bar-value",
        "baz": "baz-value",
    }
    api_key_header_key = None
    authorization_type = AuthorizationType.API_KEY
    api_key_header_value = "<my-api-value>"
    bearer_token_value = VellumSecretReference("some-non-existent-workspace-secret-id")
"
`;
