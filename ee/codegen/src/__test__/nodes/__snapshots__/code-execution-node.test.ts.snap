// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`CodeExecutionNode > basic > getNodeDisplayFile 1`] = `
"from uuid import UUID

from vellum_ee.workflows.display.editor import NodeDisplayData, NodeDisplayPosition
from vellum_ee.workflows.display.nodes import BaseCodeExecutionNodeDisplay
from vellum_ee.workflows.display.nodes.types import (
    NodeOutputDisplay,
    PortDisplayOverrides,
)

from ...nodes.code_execution_node import CodeExecutionNode


class CodeExecutionNodeDisplay(BaseCodeExecutionNodeDisplay[CodeExecutionNode]):
    label = "Code Execution Node"
    node_id = UUID("2cd960a3-cb8a-43ed-9e3f-f003fc480951")
    target_handle_id = UUID("06573a05-e6f0-48b9-bc6e-07e06d0bc1b1")
    output_id = UUID("81b270c0-4deb-4db3-aae5-138f79531b2b")
    log_output_id = UUID("46abb839-400b-4766-997e-9c463b526139")
    node_input_ids_by_name = {
        "code": UUID("9bf086d4-feed-47ff-9736-a5a6aa3a11cc"),
        "runtime": UUID("c38a71f6-3ffb-45fa-9eea-93c6984a9e3e"),
    }
    output_display = {
        CodeExecutionNode.Outputs.result: NodeOutputDisplay(
            id=UUID("81b270c0-4deb-4db3-aae5-138f79531b2b"), name="result"
        ),
        CodeExecutionNode.Outputs.log: NodeOutputDisplay(
            id=UUID("46abb839-400b-4766-997e-9c463b526139"), name="log"
        ),
    }
    port_displays = {
        CodeExecutionNode.Ports.default: PortDisplayOverrides(
            id=UUID("c38a71f6-3ffb-45fa-9eea-93c6984a9e3e")
        )
    }
    display_data = NodeDisplayData(
        position=NodeDisplayPosition(x=2075.7067885117494, y=234.65663468515768),
        width=462,
        height=288,
    )
"
`;

exports[`CodeExecutionNode > basic > getNodeFile 1`] = `
"from vellum.workflows.nodes.displayable import (
    CodeExecutionNode as BaseCodeExecutionNode,
)
from vellum.workflows.state import BaseState


class CodeExecutionNode(BaseCodeExecutionNode[BaseState, str]):
    filepath = "./script.py"
    code_inputs = {}
    runtime = "PYTHON_3_11_6"
    packages = None
"
`;

exports[`CodeExecutionNode > basic representation > should accept int and float 1`] = `
"from typing import Union

from vellum.workflows.nodes.displayable import (
    CodeExecutionNode as BaseCodeExecutionNode,
)
from vellum.workflows.state import BaseState


class CodeExecutionNode(BaseCodeExecutionNode[BaseState, Union[float, int]]):
    filepath = "./script.py"
    code_inputs = {}
    runtime = "PYTHON_3_11_6"
    packages = None
"
`;

exports[`CodeExecutionNode > basic secret node > secret ids should show names 1`] = `
"from vellum.workflows.nodes.displayable import (
    CodeExecutionNode as BaseCodeExecutionNode,
)
from vellum.workflows.references import VellumSecretReference
from vellum.workflows.state import BaseState


class CodeExecutionNode(BaseCodeExecutionNode[BaseState, str]):
    filepath = "./script.py"
    code_inputs = {
        "secret_arg": VellumSecretReference("test-secret"),
    }
    runtime = "PYTHON_3_11_6"
    packages = None
"
`;

exports[`CodeExecutionNode > basic secret node > should be resilient to invalid secret ids 1`] = `
"from vellum.workflows.nodes.displayable import (
    CodeExecutionNode as BaseCodeExecutionNode,
)
from vellum.workflows.references import VellumSecretReference
from vellum.workflows.state import BaseState


class CodeExecutionNode(BaseCodeExecutionNode[BaseState, str]):
    filepath = "./script.py"
    code_inputs = {
        "secret_arg": VellumSecretReference("5678"),
    }
    runtime = "PYTHON_3_11_6"
    packages = None
"
`;

exports[`CodeExecutionNode > code representation: Base case > should generate the correct node class 1`] = `
"from vellum.workflows.nodes.displayable import CodeExecutionNode as BaseCodeExecutionNode
from vellum.workflows.state import BaseState


class CodeExecutionNode(BaseCodeExecutionNode[BaseState, str]):
    filepath = "./script.py"
    code_inputs = {}
    runtime = "PYTHON_3_11_6"
    packages = None
"
`;

exports[`CodeExecutionNode > code representation: Escaped case > should generate the correct node class 1`] = `
"from vellum.workflows.nodes.displayable import CodeExecutionNode as BaseCodeExecutionNode
from vellum.workflows.state import BaseState


class CodeExecutionNode(BaseCodeExecutionNode[BaseState, str]):
    filepath = "./script.py"
    code_inputs = {}
    runtime = "PYTHON_3_11_6"
    packages = None
"
`;

exports[`CodeExecutionNode > failure cases > fallback to python 3.11.6 if runtime input is not valid 1`] = `
"from vellum.workflows.nodes.displayable import (
    CodeExecutionNode as BaseCodeExecutionNode,
)
from vellum.workflows.state import BaseState


class CodeExecutionNode(BaseCodeExecutionNode[BaseState, str]):
    filepath = "./script.py"
    code_inputs = {}
    runtime = "PYTHON_3_11_6"
    packages = None
"
`;

exports[`CodeExecutionNode > failure cases > fallback to python 3.11.6 if runtime input is not valid 2`] = `
"from vellum.workflows.nodes.displayable import (
    CodeExecutionNode as BaseCodeExecutionNode,
)
from vellum.workflows.state import BaseState


class CodeExecutionNode(BaseCodeExecutionNode[BaseState, str]):
    filepath = "./script.py"
    code_inputs = {}
    runtime = "PYTHON_3_11_6"
    packages = None
"
`;

exports[`CodeExecutionNode > log output id > should not generate log output id if not given 1`] = `
"from uuid import UUID

from vellum_ee.workflows.display.editor import NodeDisplayData, NodeDisplayPosition
from vellum_ee.workflows.display.nodes import BaseCodeExecutionNodeDisplay
from vellum_ee.workflows.display.nodes.types import (
    NodeOutputDisplay,
    PortDisplayOverrides,
)

from ...nodes.code_execution_node import CodeExecutionNode


class CodeExecutionNodeDisplay(BaseCodeExecutionNodeDisplay[CodeExecutionNode]):
    label = "Code Execution Node"
    node_id = UUID("2cd960a3-cb8a-43ed-9e3f-f003fc480951")
    target_handle_id = UUID("06573a05-e6f0-48b9-bc6e-07e06d0bc1b1")
    output_id = UUID("81b270c0-4deb-4db3-aae5-138f79531b2b")
    node_input_ids_by_name = {
        "code": UUID("9bf086d4-feed-47ff-9736-a5a6aa3a11cc"),
        "runtime": UUID("c38a71f6-3ffb-45fa-9eea-93c6984a9e3e"),
    }
    output_display = {
        CodeExecutionNode.Outputs.result: NodeOutputDisplay(
            id=UUID("81b270c0-4deb-4db3-aae5-138f79531b2b"), name="result"
        )
    }
    port_displays = {
        CodeExecutionNode.Ports.default: PortDisplayOverrides(
            id=UUID("c38a71f6-3ffb-45fa-9eea-93c6984a9e3e")
        )
    }
    display_data = NodeDisplayData(
        position=NodeDisplayPosition(x=2075.7067885117494, y=234.65663468515768),
        width=462,
        height=288,
    )
"
`;

exports[`CodeExecutionNode > with runtime set > should generate the correct standalone file PYTHON_3_11_6 1`] = `
"from vellum.workflows.nodes.displayable import (
    CodeExecutionNode as BaseCodeExecutionNode,
)
from vellum.workflows.state import BaseState


class CodeExecutionNode(BaseCodeExecutionNode[BaseState, str]):
    filepath = "./script.py"
    code_inputs = {}
    runtime = "PYTHON_3_11_6"
    packages = None
"
`;

exports[`CodeExecutionNode > with runtime set > should generate the correct standalone file TYPESCRIPT_5_3_3 1`] = `
"from vellum.workflows.nodes.displayable import (
    CodeExecutionNode as BaseCodeExecutionNode,
)
from vellum.workflows.state import BaseState


class CodeExecutionNode(BaseCodeExecutionNode[BaseState, str]):
    filepath = "./script.ts"
    code_inputs = {}
    runtime = "TYPESCRIPT_5_3_3"
    packages = None
"
`;
