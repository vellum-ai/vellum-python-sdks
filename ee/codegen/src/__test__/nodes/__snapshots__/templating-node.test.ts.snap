// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`TemplatingNode > basic > getNodeDisplayFile 1`] = `
"from uuid import UUID

from vellum_ee.workflows.display.editor import NodeDisplayData, NodeDisplayPosition
from vellum_ee.workflows.display.nodes import BaseTemplatingNodeDisplay
from vellum_ee.workflows.display.nodes.types import (
    NodeOutputDisplay,
    PortDisplayOverrides,
)

from ...nodes.templating_node import TemplatingNode


class TemplatingNodeDisplay(BaseTemplatingNodeDisplay[TemplatingNode]):
    label = "Templating Node"
    node_id = UUID("46e221ab-a749-41a2-9242-b1f5bf31f3a5")
    target_handle_id = UUID("3960c8e1-9baa-4b9c-991d-e399d16a45aa")
    node_input_ids_by_name = {"template": UUID("7b8af68b-cf60-4fca-9c57-868042b5b616")}
    output_display = {
        TemplatingNode.Outputs.result: NodeOutputDisplay(
            id=UUID("2d4f1826-de75-499a-8f84-0a690c8136ad"), name="result"
        )
    }
    port_displays = {
        TemplatingNode.Ports.default: PortDisplayOverrides(
            id=UUID("6ee2c814-d0a5-4ec9-83b6-45156e2f22c4")
        )
    }
    display_data = NodeDisplayData(position=NodeDisplayPosition(x=0, y=0))
"
`;

exports[`TemplatingNode > basic > getNodeFile 1`] = `
"from vellum.workflows.nodes.displayable import TemplatingNode as BaseTemplatingNode
from vellum.workflows.state import BaseState


class TemplatingNode(BaseTemplatingNode[BaseState, str]):
    template = """Hello, World!"""
    inputs = {}
"
`;

exports[`TemplatingNode > basic with json output type > getNodeDisplayFile 1`] = `
"from uuid import UUID

from vellum_ee.workflows.display.editor import NodeDisplayData, NodeDisplayPosition
from vellum_ee.workflows.display.nodes import BaseTemplatingNodeDisplay
from vellum_ee.workflows.display.nodes.types import (
    NodeOutputDisplay,
    PortDisplayOverrides,
)

from ...nodes.templating_node import TemplatingNode


class TemplatingNodeDisplay(BaseTemplatingNodeDisplay[TemplatingNode]):
    label = "Templating Node"
    node_id = UUID("46e221ab-a749-41a2-9242-b1f5bf31f3a5")
    target_handle_id = UUID("3960c8e1-9baa-4b9c-991d-e399d16a45aa")
    node_input_ids_by_name = {"template": UUID("7b8af68b-cf60-4fca-9c57-868042b5b616")}
    output_display = {
        TemplatingNode.Outputs.result: NodeOutputDisplay(
            id=UUID("2d4f1826-de75-499a-8f84-0a690c8136ad"), name="result"
        )
    }
    port_displays = {
        TemplatingNode.Ports.default: PortDisplayOverrides(
            id=UUID("6ee2c814-d0a5-4ec9-83b6-45156e2f22c4")
        )
    }
    display_data = NodeDisplayData(position=NodeDisplayPosition(x=0, y=0))
"
`;

exports[`TemplatingNode > basic with json output type > getNodeFile 1`] = `
"from vellum.workflows.nodes.displayable import TemplatingNode as BaseTemplatingNode
from vellum.workflows.state import BaseState
from vellum.workflows.types.core import Json


class TemplatingNode(BaseTemplatingNode[BaseState, Json]):
    template = """Hello, World!"""
    inputs = {}
"
`;

exports[`TemplatingNode > basic with node ports > getNodeDisplayFile 1`] = `
"from uuid import UUID

from vellum_ee.workflows.display.editor import NodeDisplayData, NodeDisplayPosition
from vellum_ee.workflows.display.nodes import BaseTemplatingNodeDisplay
from vellum_ee.workflows.display.nodes.types import (
    NodeOutputDisplay,
    PortDisplayOverrides,
)

from ...nodes.templating_node import TemplatingNode


class TemplatingNodeDisplay(BaseTemplatingNodeDisplay[TemplatingNode]):
    label = "Templating Node"
    node_id = UUID("46e221ab-a749-41a2-9242-b1f5bf31f3a5")
    target_handle_id = UUID("3960c8e1-9baa-4b9c-991d-e399d16a45aa")
    node_input_ids_by_name = {"template": UUID("7b8af68b-cf60-4fca-9c57-868042b5b616")}
    output_display = {
        TemplatingNode.Outputs.result: NodeOutputDisplay(
            id=UUID("2d4f1826-de75-499a-8f84-0a690c8136ad"), name="result"
        )
    }
    port_displays = {
        TemplatingNode.Ports.if_port: PortDisplayOverrides(
            id=UUID("308675dd-2e68-45a5-86fa-b2647a92f553")
        ),
        TemplatingNode.Ports.else_port: PortDisplayOverrides(
            id=UUID("1db0ebfd-c07e-49ed-9c4e-4822d3010367")
        ),
    }
    display_data = NodeDisplayData(position=NodeDisplayPosition(x=0, y=0))
"
`;

exports[`TemplatingNode > referencing an invalid node > getNodeFile 1`] = `
"from vellum.workflows.nodes.displayable import TemplatingNode as BaseTemplatingNode
from vellum.workflows.state import BaseState


class TemplatingNode(BaseTemplatingNode[BaseState, str]):
    template = """Hello, World!"""
    inputs = {
        "text": {},
    }
"
`;

exports[`TemplatingNode > reject on error enabled > getNodeDisplayFile 1`] = `
"from uuid import UUID

from vellum_ee.workflows.display.editor import NodeDisplayData, NodeDisplayPosition
from vellum_ee.workflows.display.nodes import (
    BaseTemplatingNodeDisplay,
    BaseTryNodeDisplay,
)
from vellum_ee.workflows.display.nodes.types import (
    NodeOutputDisplay,
    PortDisplayOverrides,
)

from ...nodes.templating_node import TemplatingNode


@BaseTryNodeDisplay.wrap(
    node_id=UUID("e7a1fbea-f5a7-4b31-a9ff-0d26c3de021f"),
    error_output_id=UUID("e7a1fbea-f5a7-4b31-a9ff-0d26c3de021f"),
)
class TemplatingNodeDisplay(BaseTemplatingNodeDisplay[TemplatingNode]):
    label = "Templating Node"
    node_id = UUID("46e221ab-a749-41a2-9242-b1f5bf31f3a5")
    target_handle_id = UUID("3960c8e1-9baa-4b9c-991d-e399d16a45aa")
    node_input_ids_by_name = {"template": UUID("7b8af68b-cf60-4fca-9c57-868042b5b616")}
    output_display = {
        TemplatingNode.Outputs.result: NodeOutputDisplay(
            id=UUID("2d4f1826-de75-499a-8f84-0a690c8136ad"), name="result"
        )
    }
    port_displays = {
        TemplatingNode.Ports.default: PortDisplayOverrides(
            id=UUID("6ee2c814-d0a5-4ec9-83b6-45156e2f22c4")
        )
    }
    display_data = NodeDisplayData(position=NodeDisplayPosition(x=0, y=0))
"
`;

exports[`TemplatingNode > reject on error enabled > getNodeFile 1`] = `
"from vellum.workflows.nodes.core import TryNode
from vellum.workflows.nodes.displayable import TemplatingNode as BaseTemplatingNode
from vellum.workflows.state import BaseState


@TryNode.wrap()
class TemplatingNode(BaseTemplatingNode[BaseState, str]):
    template = """Hello, World!"""
    inputs = {}
"
`;

exports[`TemplatingNode > reject on error enabled > should generate the node file for a dependency correctly 1`] = `
"from vellum.workflows.nodes.displayable import TemplatingNode
from vellum.workflows.state import BaseState

from .templating_node import TemplatingNode as TemplatingNodeTemplatingNode


class TemplatingNode1(TemplatingNode[BaseState, str]):
    template = """Hello, World!"""
    inputs = {
        "text": TemplatingNodeTemplatingNode.Outputs.error,
    }
"
`;

exports[`TemplatingNode > with environment variable > getNodeFile 1`] = `
"from vellum.workflows.nodes.displayable import TemplatingNode as BaseTemplatingNode
from vellum.workflows.references import EnvironmentVariableReference
from vellum.workflows.state import BaseState


class TemplatingNode(BaseTemplatingNode[BaseState, str]):
    template = """Hello, World!"""
    inputs = {
        "my_test_environment_variable": EnvironmentVariableReference(
            name="MY_TEST_ENVIRONMENT_VARIABLE"
        ),
    }
"
`;
