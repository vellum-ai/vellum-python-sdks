// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Workflow > write > should generate correct code when there are input variables 1`] = `
"from vellum.workflows import BaseWorkflow
from vellum.workflows.state import BaseState

from .inputs import Inputs


class TestWorkflow(BaseWorkflow[Inputs, BaseState]):
    pass
"
`;

exports[`Workflow > write > should generate correct code when there are no input variables 1`] = `
"from vellum.workflows import BaseWorkflow


class TestWorkflow(BaseWorkflow):
    pass
"
`;

exports[`Workflow > write > should generate correct code with Search Results as an output variable 1`] = `
"from vellum.workflows import BaseWorkflow
from vellum.workflows.state import BaseState

from .inputs import Inputs
from .nodes.final_output import FinalOutput


class TestWorkflow(BaseWorkflow[Inputs, BaseState]):
    class Outputs(BaseWorkflow.Outputs):
        query = FinalOutput.Outputs.value
"
`;

exports[`Workflow > write > should generate correct code with an output variable mapped to a non-existent node 1`] = `
"from vellum.workflows import BaseWorkflow
from vellum.workflows.state import BaseState

from .inputs import Inputs


class TestWorkflow(BaseWorkflow[Inputs, BaseState]):
    class Outputs(BaseWorkflow.Outputs):
        passthrough = None
"
`;

exports[`Workflow > write > should generate correct code with an output variable mapped to an input variable 1`] = `
"from vellum.workflows import BaseWorkflow
from vellum.workflows.state import BaseState

from .inputs import Inputs


class TestWorkflow(BaseWorkflow[Inputs, BaseState]):
    class Outputs(BaseWorkflow.Outputs):
        passthrough = Inputs.query
"
`;

exports[`Workflow > write > should generate correct code with an output variable mapped to an unused terminal node 1`] = `
"from vellum.workflows import BaseWorkflow

from .nodes.final_output import FinalOutput


class TestWorkflow(BaseWorkflow):
    unused_graphs = {FinalOutput}

    class Outputs(BaseWorkflow.Outputs):
        passthrough = FinalOutput.Outputs.value
"
`;

exports[`Workflow > write > should generate correct display code when there are input variables with escape characters 1`] = `
"from uuid import UUID

from vellum_ee.workflows.display.base import (
    WorkflowDisplayData,
    WorkflowDisplayDataViewport,
    WorkflowInputsDisplay,
    WorkflowMetaDisplay,
)
from vellum_ee.workflows.display.editor import NodeDisplayData, NodeDisplayPosition
from vellum_ee.workflows.display.workflows import BaseWorkflowDisplay

from ..inputs import Inputs
from ..workflow import TestWorkflow


class TestWorkflowDisplay(BaseWorkflowDisplay[TestWorkflow]):
    workflow_display = WorkflowMetaDisplay(
        entrypoint_node_id=UUID("entrypoint"),
        entrypoint_node_source_handle_id=UUID("<source_handle_id>"),
        entrypoint_node_display=NodeDisplayData(
            position=NodeDisplayPosition(x=0, y=0),
            z_index=None,
            width=None,
            height=None,
        ),
        display_data=WorkflowDisplayData(
            viewport=WorkflowDisplayDataViewport(x=0, y=0, zoom=0)
        ),
    )
    inputs_display = {
        Inputs.bad_input: WorkflowInputsDisplay(
            id=UUID("5f64210f-ec43-48ce-ae40-40a9ba4c4c11"), name='Bad "Input"'
        )
    }
    entrypoint_displays = {}
    output_displays = {}
"
`;

exports[`Workflow > write > should handle edges pointing to non-existent nodes 1`] = `
"from vellum.workflows import BaseWorkflow
from vellum.workflows.state import BaseState

from .inputs import Inputs
from .nodes.search_node import SearchNode


class TestWorkflow(BaseWorkflow[Inputs, BaseState]):
    graph = SearchNode
"
`;

exports[`Workflow > write > should handle loops of conditionals and import Graph.from_set properly 1`] = `
"from vellum.workflows import BaseWorkflow
from vellum.workflows.graph import Graph

from .nodes.final_output_node import FinalOutputNode
from .nodes.loop_check_node import LoopCheckNode
from .nodes.start_node import StartNode
from .nodes.top_node import TopNode


class TestWorkflow(BaseWorkflow):
    graph = {
        StartNode.Ports.if_1 >> TopNode,
        StartNode.Ports.else_1,
    } >> Graph.from_set(
        {
            LoopCheckNode.Ports.if_1 >> StartNode,
            LoopCheckNode.Ports.else_1 >> FinalOutputNode,
        }
    )
"
`;

exports[`Workflow > write > should handle the case of multiple nodes with the same label 1`] = `
"from vellum.workflows import BaseWorkflow

from .nodes.templating_node import TemplatingNode
from .nodes.templating_node_1 import TemplatingNode1


class TestWorkflow(BaseWorkflow):
    graph = TemplatingNode >> TemplatingNode1
"
`;

exports[`Workflow > write > should handle the workflow generation even if graph attribute fails in non-strict mode 1`] = `
"from vellum.workflows import BaseWorkflow


class TestWorkflow(BaseWorkflow):
    pass
"
`;
