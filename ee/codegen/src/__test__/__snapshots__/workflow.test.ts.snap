// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Workflow > write > should generate correct code when there are input variables 1`] = `
"from vellum.workflows import BaseWorkflow


class TestWorkflow(BaseWorkflow):
    pass
"
`;

exports[`Workflow > write > should generate correct code when there are input variables with escape characters 1`] = `
"from vellum.workflows import BaseWorkflow
from .inputs import Inputs
from vellum.workflows.state import BaseState


class TestWorkflow(BaseWorkflow[Inputs, BaseState]):
    pass
"
`;

exports[`Workflow > write > should generate correct code when there are no input variables 1`] = `
"from vellum.workflows import BaseWorkflow


class TestWorkflow(BaseWorkflow):
    pass
"
`;

exports[`Workflow > write > should generate correct code with Search Results as an output variable 1`] = `
"from vellum.workflows import BaseWorkflow
from .inputs import Inputs
from vellum.workflows.state import BaseState
from .nodes.final_output import FinalOutput


class TestWorkflow(BaseWorkflow[Inputs, BaseState]):
    class Outputs(BaseWorkflow.Outputs):
        query = FinalOutput.Outputs.value
"
`;

exports[`Workflow > write > should generate correct code with an output variable mapped to an input variable 1`] = `
"from vellum.workflows import BaseWorkflow
from .inputs import Inputs
from vellum.workflows.state import BaseState


class TestWorkflow(BaseWorkflow[Inputs, BaseState]):
    class Outputs(BaseWorkflow.Outputs):
        passthrough = Inputs.query
"
`;

exports[`Workflow > write > should generate correct display code when there are input variables with escape characters 1`] = `
"from vellum_ee.workflows.display.workflows.vellum_workflow_display import (
    VellumWorkflowDisplay,
)
from ..workflow import TestWorkflow
from vellum_ee.workflows.display.vellum import (
    WorkflowMetaVellumDisplayOverrides,
    NodeDisplayData,
    NodeDisplayPosition,
    WorkflowDisplayData,
    WorkflowDisplayDataViewport,
    WorkflowInputsVellumDisplayOverrides,
)
from uuid import UUID
from ..inputs import Inputs


class TestWorkflowDisplay(VellumWorkflowDisplay[TestWorkflow]):
    workflow_display = WorkflowMetaVellumDisplayOverrides(
        entrypoint_node_id=UUID("entrypoint"),
        entrypoint_node_source_handle_id=UUID("<source_handle_id>"),
        entrypoint_node_display=NodeDisplayData(
            position=NodeDisplayPosition(x=0, y=0), width=None, height=None
        ),
        display_data=WorkflowDisplayData(
            viewport=WorkflowDisplayDataViewport(x=0, y=0, zoom=0)
        ),
    )
    inputs_display = {
        Inputs.bad_input: WorkflowInputsVellumDisplayOverrides(
            id=UUID("5f64210f-ec43-48ce-ae40-40a9ba4c4c11"),
            name='Bad "Input"',
            required=False,
        )
    }
    entrypoint_displays = {}
    output_displays = {}
"
`;

exports[`Workflow > write > should handle edges pointing to non-existent nodes 1`] = `
"from vellum.workflows import BaseWorkflow
from .inputs import Inputs
from vellum.workflows.state import BaseState
from .nodes.search_node import SearchNode


class TestWorkflow(BaseWorkflow[Inputs, BaseState]):
    graph = SearchNode
"
`;

exports[`Workflow > write > should handle loops of conditionals and import Graph.from_set properly 1`] = `
"from vellum.workflows import BaseWorkflow
from .nodes.start_node import StartNode
from .nodes.top_node import TopNode
from vellum.workflows.graph import Graph
from .nodes.loop_check_node import LoopCheckNode
from .nodes.final_output_node import FinalOutputNode


class TestWorkflow(BaseWorkflow):
    graph = {
        StartNode.Ports.branch_1 >> TopNode,
        StartNode.Ports.branch_2,
    } >> Graph.from_set(
        {
            LoopCheckNode.Ports.branch_1 >> StartNode,
            LoopCheckNode.Ports.branch_2 >> FinalOutputNode,
        }
    )
"
`;

exports[`Workflow > write > should handle the case of multiple nodes with the same label 1`] = `
"from vellum.workflows import BaseWorkflow
from .nodes.templating_node import TemplatingNode
from .nodes.templating_node_1 import TemplatingNode1


class TestWorkflow(BaseWorkflow):
    graph = TemplatingNode >> TemplatingNode1
"
`;

exports[`Workflow > write > should handle the workflow generation even if graph attribute fails in non-strict mode 1`] = `
"from vellum.workflows import BaseWorkflow


class TestWorkflow(BaseWorkflow):
    pass
"
`;
