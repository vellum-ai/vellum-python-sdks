// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`WorkflowProjectGenerator > state > should generate a state.py file > code/display/workflow.py 1`] = `
"from uuid import UUID

from vellum_ee.workflows.display.base import EdgeDisplay, EntrypointDisplay, StateValueDisplay, WorkflowMetaDisplay
from vellum_ee.workflows.display.editor import NodeDisplayData, NodeDisplayPosition
from vellum_ee.workflows.display.workflows import BaseWorkflowDisplay

from ..nodes.templating_node import TemplatingNode
from ..state import State
from ..workflow import Workflow


class WorkflowDisplay(BaseWorkflowDisplay[Workflow]):
    workflow_display = WorkflowMetaDisplay(
        entrypoint_node_id=UUID("entry"),
        entrypoint_node_source_handle_id=UUID("entry_source"),
        entrypoint_node_display=NodeDisplayData(position=NodeDisplayPosition(x=0, y=0)),
    )
    state_value_displays = {
        State.foo: StateValueDisplay(id=UUID("5bc5356a-154f-4bba-a8ee-eb283bfd2a25"), name="foo"),
    }
    entrypoint_displays = {
        TemplatingNode: EntrypointDisplay(id=UUID("entry"), edge_display=EdgeDisplay(id=UUID("edge_1")))
    }
    output_displays = {}
"
`;

exports[`WorkflowProjectGenerator > state > should generate a state.py file > code/state.py 1`] = `
"from typing import Optional

from vellum.workflows.state import BaseState


class State(BaseState):
    foo: Optional[str] = None
"
`;

exports[`WorkflowProjectGenerator > state > should generate a state.py file > code/workflow.py 1`] = `
"from vellum.workflows import BaseWorkflow
from vellum.workflows.inputs import BaseInputs

from .nodes.templating_node import TemplatingNode
from .state import State


class Workflow(BaseWorkflow[BaseInputs, State]):
    graph = TemplatingNode
"
`;
