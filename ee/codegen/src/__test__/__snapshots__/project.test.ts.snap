// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`WorkflowProjectGenerator > Nodes with forward references > should generate a proper Lazy Reference for the first node 1`] = `
"from vellum.workflows.nodes.displayable import BaseNode
from vellum.workflows.references import LazyReference


class FirstNode(BaseNode):
    forward = LazyReference("SecondNode.Outputs.output")

    class NodeTrigger(BaseNode.Trigger):
        merge_behavior = "AWAIT_ATTRIBUTES"

    class Outputs(BaseNode.Outputs):
        pass
"
`;

exports[`WorkflowProjectGenerator > code execution node at project level > should not autoformat the script file 1`] = `
"import foo, bar
baz = foo + bar
"
`;

exports[`WorkflowProjectGenerator > inlude sandbox > should include a sandbox.py file when passed sandboxInputs 1`] = `
"from vellum.workflows.sandbox import WorkflowSandboxRunner
from .workflow import Workflow
from .inputs import Inputs
from vellum import ChatMessage, StringChatMessageContent, ArrayChatMessageContent

if __name__ != "__main__":
    raise Exception("This file is not meant to be imported")


runner = WorkflowSandboxRunner(
    workflow=Workflow(),
    inputs=[
        Inputs(
            input="foo",
            chat=[
                ChatMessage(role="USER", text="foo"),
            ],
        ),
        Inputs(
            input="bar",
            chat=[
                ChatMessage(role="USER", content=StringChatMessageContent(value="bar")),
            ],
        ),
        Inputs(
            input="hello",
            chat=[
                ChatMessage(
                    role="USER",
                    content=ArrayChatMessageContent(
                        value=[
                            StringChatMessageContent(value="hello"),
                        ]
                    ),
                ),
            ],
        ),
    ],
)

runner.run()
"
`;

exports[`WorkflowProjectGenerator > nodes with output values > should prioritize terminal node data over output values 1`] = `
"from vellum.workflows.nodes.displayable import FinalOutputNode
from vellum.workflows.state import BaseState
from .templating_node import TemplatingNode


class FinalOutput(FinalOutputNode[BaseState, str]):
    class Outputs(FinalOutputNode.Outputs):
        value = TemplatingNode.Outputs.result
"
`;
