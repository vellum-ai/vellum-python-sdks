// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Workflow > graph > Should handle an a conditional pointing both ports to the same conditional node 1`] = `
"{
    FirstCheckNode.Ports.if_port
    >> {
        SecondCheckNode.Ports.if_port >> SecondOutputNode,
        SecondCheckNode.Ports.else_port >> ThirdOutputNode,
    }
    >> FourthOutputNode,
    FirstCheckNode.Ports.else_port >> FirstOutputNode >> SecondCheckNode,
}
"
`;

exports[`Workflow > graph > Should handle an else case within a conditioned set 1`] = `
"{
    {
        FirstCheckNode.Ports.if_port >> SecondInnerCheckNode.Ports.if_port,
        FirstCheckNode.Ports.else_port,
    }
    >> FirstOutputNode,
    FirstCheckNode.Ports.if_port
    >> {
        SecondInnerCheckNode.Ports.if_port,
        SecondInnerCheckNode.Ports.else_port >> SecondOutputNode,
    },
}
"
`;

exports[`Workflow > graph > Should handle two branches from a node to a node 1`] = `
"(
    FirstNode
    >> {
        SecondNode >> ThirdNode >> FourthNode,
        FourthNode,
    }
    >> FifthNode
)
"
`;

exports[`Workflow > graph > Should solve a case with a branched node within a set into a merge node 1`] = `
"(
    StartNode
    >> {
        TopNode,
        BottomNode,
        BottomNode >> SecondBottomNode,
    }
    >> MergeNode
)
"
`;

exports[`Workflow > graph > should be able to create a proper else edge when there are three ports pointing to a set 1`] = `
"{
    FirstCheckNode.Ports.if_port
    >> {
        FirstInnerCheckNode.Ports.if_port >> {
            SecondInnerCheckNode.Ports.if_port >> {
                FinalCheckNode.Ports.if_port >> InnerTerminalNode,
                FinalCheckNode.Ports.else_port >> OuterOutputNode,
            },
            SecondInnerCheckNode.Ports.else_port >> OuterOutputNode,
        },
        FirstInnerCheckNode.Ports.else_port >> FinalCheckNode,
    },
    FirstCheckNode.Ports.else_port >> FinalCheckNode,
}
"
`;

exports[`Workflow > graph > should be correct for a basic conditional node case 1`] = `
"{
    ConditionalNode.Ports.branch_1 >> TemplatingNode,
    ConditionalNode.Ports.branch_2 >> TemplatingNode2,
}
"
`;

exports[`Workflow > graph > should be correct for a basic merge between a node and an edge 1`] = `
"{
    TemplatingNode >> TemplatingNode3,
    TemplatingNode2,
} >> MergeNode
"
`;

exports[`Workflow > graph > should be correct for a basic merge node and an additional edge 1`] = `
"(
    {
        TemplatingNode,
        TemplatingNode2,
    }
    >> MergeNode
    >> TemplatingNode3
)
"
`;

exports[`Workflow > graph > should be correct for a basic merge node case 1`] = `
"{
    TemplatingNode,
    TemplatingNode2,
} >> MergeNode
"
`;

exports[`Workflow > graph > should be correct for a basic merge node case of multiple nodes 1`] = `
"{
    TemplatingNode,
    TemplatingNode2,
    TemplatingNode3,
} >> MergeNode
"
`;

exports[`Workflow > graph > should be correct for a basic multiple nodes case 1`] = `
"{
    TemplatingNode,
    TemplatingNode2,
}
"
`;

exports[`Workflow > graph > should be correct for a basic single edge case 1`] = `
"TemplatingNode >> TemplatingNode2
"
`;

exports[`Workflow > graph > should be correct for a basic single node case 1`] = `
"TemplatingNode
"
`;

exports[`Workflow > graph > should be correct for a longer branch 1`] = `
"TemplatingNode >> TemplatingNode2 >> TemplatingNode3
"
`;

exports[`Workflow > graph > should be correct for a nested conditional node within a set 1`] = `
"{
    ConditionalNode.Ports.branch_1 >> TemplatingNode,
    ConditionalNode.Ports.branch_2
    >> {
        ConditionalNode2.Ports.branch_2
        >> {
            TemplatingNode3,
            TemplatingNode4,
        },
        TemplatingNode2,
    },
}
"
`;

exports[`Workflow > graph > should be correct for a node to a set 1`] = `
"TemplatingNode >> {
    TemplatingNode2,
    TemplatingNode3,
}
"
`;

exports[`Workflow > graph > should be correct for a node to a set to a node 1`] = `
"(
    TemplatingNode
    >> {
        TemplatingNode2,
        TemplatingNode3,
    }
    >> TemplatingNode4
)
"
`;

exports[`Workflow > graph > should be correct for a single port pointing to a set 1`] = `
"ConditionalNode.Ports.branch_1 >> {
    TemplatingNode,
    TemplatingNode2,
}
"
`;

exports[`Workflow > graph > should be correct for port within set to a set 1`] = `
"{
    ConditionalNode.Ports.branch_1 >> TemplatingNode,
    ConditionalNode.Ports.branch_2
    >> {
        TemplatingNode2,
        TemplatingNode3,
    },
}
"
`;

exports[`Workflow > graph > should be correct for set of a branch and a node 1`] = `
"{
    TemplatingNode >> TemplatingNode2,
    TemplatingNode3,
}
"
`;

exports[`Workflow > graph > should be correct for set of a branch and a node to a node 1`] = `
"(
    {
        TemplatingNode >> TemplatingNode3 >> TemplatingNode4,
        TemplatingNode2,
    }
    >> MergeNode
    >> TemplatingNode5
)
"
`;

exports[`Workflow > graph > should be correct for three nodes 1`] = `
"{
    TemplatingNode,
    TemplatingNode2,
    TemplatingNode3,
}
"
`;

exports[`Workflow > graph > should be correct for two branches from the same node 1`] = `
"TemplatingNode >> {
    MergeNode,
    TemplatingNode2 >> MergeNode,
}
"
`;

exports[`Workflow > graph > should be correct for two branches merging from sets 1`] = `
"{
    ConditionalNode.Ports.branch_1
    >> TemplatingNode
    >> {
        TemplatingNode3 >> TemplatingNode4,
        TemplatingNode5,
    },
    ConditionalNode.Ports.branch_2 >> TemplatingNode2 >> TemplatingNode3,
}
"
`;

exports[`Workflow > graph > should be pointing to the correct terminal nodes from a nested set of conditionals 1`] = `
"{
    FirstCheckNode.Ports.if_port
    >> FirstInnerCheckNode
    >> SecondInnerCheckNode
    >> FinalCheckNode,
    FirstCheckNode.Ports.else_port
    >> {
        FinalCheckNode.Ports.if_port >> InnerTerminalNode,
        FinalCheckNode.Ports.else_port >> OuterOutputNode,
    },
}
"
`;

exports[`Workflow > graph > should define nested sets of nodes without compilation errors 1`] = `
"TopNode >> {
    OutputTopNode,
    OutputMiddleNode,
    OutputBottomNode,
}
"
`;

exports[`Workflow > graph > should generate correct graph for a loop with ports 1`] = `
"{
    FirstNode.Ports.if_port >> FinalNode,
    FirstNode.Ports.else_port >> SecondNode >> FirstNode,
}
"
`;

exports[`Workflow > graph > should generate correct graph for expression reference own output 1`] = `
"{
    Prompt.Ports.group_1_if_port >> FinalOutput,
    Prompt.Ports.group_1_else_port >> SecondNode >> Prompt,
}
"
`;

exports[`Workflow > graph > should handle a simple edge of generic nodes 1`] = `
"StartNode >> EndNode
"
`;

exports[`Workflow > graph > should properly format UUID-like port names in graph references 1`] = `
"{
    GenericNode.Ports.port_7d813792_04c2_4d26_a126_16de4c4cebaf >> FirstNode,
    GenericNode.Ports.port_6f909cc6_887c_46d8_966b_46547900fc9c >> SecondNode,
}
"
`;

exports[`Workflow > graph > should support an edge between two sets 1`] = `
"{
    TopLeftNode
    >> {
        TopRightNode,
        BottomRightNode,
    },
    BottomLeftNode
    >> {
        TopRightNode,
        BottomRightNode,
    },
}
"
`;
