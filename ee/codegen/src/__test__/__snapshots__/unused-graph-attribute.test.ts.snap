// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`Workflow > unused_graphs > should be empty when all nodes are connected to entrypoint 1`] = `
"from vellum.workflows import BaseWorkflow

from .nodes.my_custom_node import ConnectedNode1
from .nodes.my_custom_node_1 import ConnectedNode2


class TestWorkflow(BaseWorkflow):
    graph = ConnectedNode1 >> ConnectedNode2
"
`;

exports[`Workflow > unused_graphs > should handle circular graphs 1`] = `
"from vellum.workflows import BaseWorkflow

from .nodes.my_custom_node import ConnectedNode
from .nodes.my_custom_node_1 import DisconnectedNode1
from .nodes.my_custom_node_2 import DisconnectedNode2
from .nodes.my_custom_node_3 import DisconnectedNode3


class TestWorkflow(BaseWorkflow):
    graph = ConnectedNode
    unused_graphs = {
        DisconnectedNode1 >> DisconnectedNode2 >> DisconnectedNode3 >> DisconnectedNode1
    }
"
`;

exports[`Workflow > unused_graphs > should handle conditional node with prompt nodes in different ports in unused graphs 1`] = `
"from vellum.workflows import BaseWorkflow

from .nodes.conditional_node import ConditionalNode
from .nodes.my_custom_node import ConnectedNode
from .nodes.prompt_node import PromptNode
from .nodes.prompt_node_1 import PromptNode1


class TestWorkflow(BaseWorkflow):
    graph = ConnectedNode
    unused_graphs = {
        ConditionalNode.Ports.if_1 >> PromptNode,
        ConditionalNode.Ports.else_1 >> PromptNode1,
    }
"
`;

exports[`Workflow > unused_graphs > should identify multiple disconnected graphs 1`] = `
"from vellum.workflows import BaseWorkflow

from .nodes.my_custom_node import ConnectedNode
from .nodes.my_custom_node_1 import DisconnectedNode1
from .nodes.my_custom_node_2 import DisconnectedNode2
from .nodes.my_custom_node_3 import DisconnectedNode3
from .nodes.my_custom_node_4 import DisconnectedNode4
from .nodes.my_custom_node_5 import DisconnectedNode5
from .nodes.my_custom_node_6 import DisconnectedNode6


class TestWorkflow(BaseWorkflow):
    graph = ConnectedNode
    unused_graphs = {
        DisconnectedNode1
        >> {
            DisconnectedNode2,
            DisconnectedNode3,
        },
        DisconnectedNode4 >> DisconnectedNode5 >> DisconnectedNode6,
    }
"
`;

exports[`Workflow > unused_graphs > should identify multiple disconnected graphs with flipped edges 1`] = `
"from vellum.workflows import BaseWorkflow

from .nodes.my_custom_node import ConnectedNode
from .nodes.my_custom_node_1 import DisconnectedNode2
from .nodes.my_custom_node_2 import DisconnectedNode3
from .nodes.my_custom_node_3 import DisconnectedNode1


class TestWorkflow(BaseWorkflow):
    graph = ConnectedNode
    unused_graphs = {DisconnectedNode1 >> DisconnectedNode2 >> DisconnectedNode3}
"
`;

exports[`Workflow > unused_graphs > should identify simple disconnected graph 1`] = `
"from vellum.workflows import BaseWorkflow

from .nodes.my_custom_node import ConnectedNode
from .nodes.my_custom_node_1 import DisconnectedNode1
from .nodes.my_custom_node_2 import DisconnectedNode2


class TestWorkflow(BaseWorkflow):
    graph = ConnectedNode
    unused_graphs = {DisconnectedNode1 >> DisconnectedNode2}
"
`;
