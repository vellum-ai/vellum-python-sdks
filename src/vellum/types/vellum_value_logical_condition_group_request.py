# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic
from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, update_forward_refs
from .condition_combinator import ConditionCombinator


class VellumValueLogicalConditionGroupRequest(UniversalBaseModel):
    """
    A higher-order condition that combines one or more basic conditions or other higher-order conditions.
    """

    type: typing.Literal["LOGICAL_CONDITION_GROUP"] = "LOGICAL_CONDITION_GROUP"
    conditions: typing.List["VellumValueLogicalExpressionRequest"]
    combinator: ConditionCombinator
    negated: bool

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from .array_vellum_value_request import ArrayVellumValueRequest  # noqa: E402, F401, I001
from .vellum_value_logical_expression_request import VellumValueLogicalExpressionRequest  # noqa: E402, F401, I001

update_forward_refs(VellumValueLogicalConditionGroupRequest)
