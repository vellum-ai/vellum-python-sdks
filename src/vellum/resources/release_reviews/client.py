# This file was auto-generated by Fern from our API Definition.

import typing

from ...core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ...core.request_options import RequestOptions
from ...types.workflow_deployment_release import WorkflowDeploymentRelease
from .raw_client import AsyncRawReleaseReviewsClient, RawReleaseReviewsClient


class ReleaseReviewsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._raw_client = RawReleaseReviewsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> RawReleaseReviewsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        RawReleaseReviewsClient
        """
        return self._raw_client

    def retrieve_workflow_deployment_release(
        self, id: str, release_id_or_release_tag: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> WorkflowDeploymentRelease:
        """
        Retrieve a specific Workflow Deployment Release by either its UUID or the name of a Release Tag that points to it.

        Parameters
        ----------
        id : str
            Either the Workflow Deployment's ID or its unique name

        release_id_or_release_tag : str
            Either the UUID of Workflow Deployment Release you'd like to retrieve, or the name of a Release Tag that's pointing to the Workflow Deployment Release you'd like to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WorkflowDeploymentRelease


        Examples
        --------
        from vellum import Vellum
        client = Vellum(api_key="YOUR_API_KEY", )
        client.release_reviews.retrieve_workflow_deployment_release(id='id', release_id_or_release_tag='release_id_or_release_tag', )
        """
        _response = self._raw_client.retrieve_workflow_deployment_release(
            id, release_id_or_release_tag, request_options=request_options
        )
        return _response.data


class AsyncReleaseReviewsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._raw_client = AsyncRawReleaseReviewsClient(client_wrapper=client_wrapper)

    @property
    def with_raw_response(self) -> AsyncRawReleaseReviewsClient:
        """
        Retrieves a raw implementation of this client that returns raw responses.

        Returns
        -------
        AsyncRawReleaseReviewsClient
        """
        return self._raw_client

    async def retrieve_workflow_deployment_release(
        self, id: str, release_id_or_release_tag: str, *, request_options: typing.Optional[RequestOptions] = None
    ) -> WorkflowDeploymentRelease:
        """
        Retrieve a specific Workflow Deployment Release by either its UUID or the name of a Release Tag that points to it.

        Parameters
        ----------
        id : str
            Either the Workflow Deployment's ID or its unique name

        release_id_or_release_tag : str
            Either the UUID of Workflow Deployment Release you'd like to retrieve, or the name of a Release Tag that's pointing to the Workflow Deployment Release you'd like to retrieve.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        WorkflowDeploymentRelease


        Examples
        --------
        from vellum import AsyncVellum
        import asyncio
        client = AsyncVellum(api_key="YOUR_API_KEY", )
        async def main() -> None:
            await client.release_reviews.retrieve_workflow_deployment_release(id='id', release_id_or_release_tag='release_id_or_release_tag', )
        asyncio.run(main())
        """
        _response = await self._raw_client.retrieve_workflow_deployment_release(
            id, release_id_or_release_tag, request_options=request_options
        )
        return _response.data
