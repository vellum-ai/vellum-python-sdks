# This file was auto-generated by Fern from our API Definition.

from vellum import Vellum
from vellum import AsyncVellum
import typing
from .utilities import validate_response
from vellum import DocumentIndexIndexingConfigRequest
from vellum import HkunlpInstructorXlVectorizerRequest
from vellum import InstructorVectorizerConfigRequest
from vellum import SentenceChunkingRequest
from vellum import SentenceChunkerConfigRequest


async def test_list_(client: Vellum, async_client: AsyncVellum) -> None:
    expected_response: typing.Any = {
        "count": 123,
        "next": "http://api.example.org/accounts/?offset=400&limit=100",
        "previous": "http://api.example.org/accounts/?offset=200&limit=100",
        "results": [
            {
                "id": "id",
                "created": "2024-01-15T09:30:00Z",
                "label": "label",
                "name": "name",
                "status": "ACTIVE",
                "environment": "DEVELOPMENT",
                "indexing_config": {"vectorizer": {"config": {}, "model_name": "text-embedding-3-small"}},
            }
        ],
    }
    expected_types: typing.Any = {
        "count": "integer",
        "next": None,
        "previous": None,
        "results": (
            "list",
            {
                0: {
                    "id": None,
                    "created": "datetime",
                    "label": None,
                    "name": None,
                    "status": None,
                    "environment": None,
                    "indexing_config": {"vectorizer": {"config": {}, "model_name": None}},
                }
            },
        ),
    }
    response = client.document_indexes.list()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.document_indexes.list()
    validate_response(async_response, expected_response, expected_types)


async def test_create(client: Vellum, async_client: AsyncVellum) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "created": "2024-01-15T09:30:00Z",
        "label": "label",
        "name": "name",
        "status": "ACTIVE",
        "environment": "DEVELOPMENT",
        "indexing_config": {
            "vectorizer": {"config": {}, "model_name": "text-embedding-3-small"},
            "chunking": {"chunker_name": "reducto-chunker"},
        },
    }
    expected_types: typing.Any = {
        "id": None,
        "created": "datetime",
        "label": None,
        "name": None,
        "status": None,
        "environment": None,
        "indexing_config": {"vectorizer": {"config": {}, "model_name": None}, "chunking": {"chunker_name": None}},
    }
    response = client.document_indexes.create(
        label="My Document Index",
        name="my-document-index",
        indexing_config=DocumentIndexIndexingConfigRequest(
            vectorizer=HkunlpInstructorXlVectorizerRequest(
                config=InstructorVectorizerConfigRequest(
                    instruction_domain="",
                    instruction_query_text_type="plain_text",
                    instruction_document_text_type="plain_text",
                )
            ),
            chunking=SentenceChunkingRequest(
                chunker_config=SentenceChunkerConfigRequest(character_limit=1000, min_overlap_ratio=0.5)
            ),
        ),
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.document_indexes.create(
        label="My Document Index",
        name="my-document-index",
        indexing_config=DocumentIndexIndexingConfigRequest(
            vectorizer=HkunlpInstructorXlVectorizerRequest(
                config=InstructorVectorizerConfigRequest(
                    instruction_domain="",
                    instruction_query_text_type="plain_text",
                    instruction_document_text_type="plain_text",
                )
            ),
            chunking=SentenceChunkingRequest(
                chunker_config=SentenceChunkerConfigRequest(character_limit=1000, min_overlap_ratio=0.5)
            ),
        ),
    )
    validate_response(async_response, expected_response, expected_types)


async def test_retrieve(client: Vellum, async_client: AsyncVellum) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "created": "2024-01-15T09:30:00Z",
        "label": "label",
        "name": "name",
        "status": "ACTIVE",
        "environment": "DEVELOPMENT",
        "indexing_config": {
            "vectorizer": {"config": {}, "model_name": "text-embedding-3-small"},
            "chunking": {"chunker_name": "reducto-chunker"},
        },
    }
    expected_types: typing.Any = {
        "id": None,
        "created": "datetime",
        "label": None,
        "name": None,
        "status": None,
        "environment": None,
        "indexing_config": {"vectorizer": {"config": {}, "model_name": None}, "chunking": {"chunker_name": None}},
    }
    response = client.document_indexes.retrieve(id="id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.document_indexes.retrieve(id="id")
    validate_response(async_response, expected_response, expected_types)


async def test_update(client: Vellum, async_client: AsyncVellum) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "created": "2024-01-15T09:30:00Z",
        "label": "label",
        "name": "name",
        "status": "ACTIVE",
        "environment": "DEVELOPMENT",
        "indexing_config": {
            "vectorizer": {"config": {}, "model_name": "text-embedding-3-small"},
            "chunking": {"chunker_name": "reducto-chunker"},
        },
    }
    expected_types: typing.Any = {
        "id": None,
        "created": "datetime",
        "label": None,
        "name": None,
        "status": None,
        "environment": None,
        "indexing_config": {"vectorizer": {"config": {}, "model_name": None}, "chunking": {"chunker_name": None}},
    }
    response = client.document_indexes.update(id="id", label="label")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.document_indexes.update(id="id", label="label")
    validate_response(async_response, expected_response, expected_types)


async def test_destroy(client: Vellum, async_client: AsyncVellum) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.document_indexes.destroy(id="id")  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.document_indexes.destroy(id="id")  # type: ignore[func-returns-value]
        is None
    )


async def test_partial_update(client: Vellum, async_client: AsyncVellum) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "created": "2024-01-15T09:30:00Z",
        "label": "label",
        "name": "name",
        "status": "ACTIVE",
        "environment": "DEVELOPMENT",
        "indexing_config": {
            "vectorizer": {"config": {}, "model_name": "text-embedding-3-small"},
            "chunking": {"chunker_name": "reducto-chunker"},
        },
    }
    expected_types: typing.Any = {
        "id": None,
        "created": "datetime",
        "label": None,
        "name": None,
        "status": None,
        "environment": None,
        "indexing_config": {"vectorizer": {"config": {}, "model_name": None}, "chunking": {"chunker_name": None}},
    }
    response = client.document_indexes.partial_update(id="id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.document_indexes.partial_update(id="id")
    validate_response(async_response, expected_response, expected_types)


async def test_add_document(client: Vellum, async_client: AsyncVellum) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.document_indexes.add_document(document_id="document_id", id="id")  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.document_indexes.add_document(document_id="document_id", id="id")  # type: ignore[func-returns-value]
        is None
    )


async def test_remove_document(client: Vellum, async_client: AsyncVellum) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.document_indexes.remove_document(document_id="document_id", id="id")  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.document_indexes.remove_document(document_id="document_id", id="id")  # type: ignore[func-returns-value]
        is None
    )
