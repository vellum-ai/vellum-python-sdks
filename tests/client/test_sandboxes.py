# This file was auto-generated by Fern from our API Definition.

from vellum import Vellum
from vellum import AsyncVellum
import typing
from .utilities import validate_response
from vellum import NamedScenarioInputStringVariableValueRequest


async def test_deploy_prompt(client: Vellum, async_client: AsyncVellum) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "created": "2024-01-15T09:30:00Z",
        "label": "label",
        "name": "name",
        "status": "ACTIVE",
        "environment": "DEVELOPMENT",
        "last_deployed_on": "2024-01-15T09:30:00Z",
        "input_variables": [
            {"id": "id", "key": "key", "type": "STRING", "required": True, "default": {"type": "STRING"}}
        ],
        "description": "description",
        "active_model_version_ids": ["active_model_version_ids"],
        "last_deployed_history_item_id": "last_deployed_history_item_id",
    }
    expected_types: typing.Any = {
        "id": None,
        "created": "datetime",
        "label": None,
        "name": None,
        "status": None,
        "environment": None,
        "last_deployed_on": "datetime",
        "input_variables": (
            "list",
            {0: {"id": None, "key": None, "type": None, "required": None, "default": {"type": None}}},
        ),
        "description": None,
        "active_model_version_ids": ("list", {0: None}),
        "last_deployed_history_item_id": None,
    }
    response = client.sandboxes.deploy_prompt(id="id", prompt_variant_id="prompt_variant_id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.sandboxes.deploy_prompt(id="id", prompt_variant_id="prompt_variant_id")
    validate_response(async_response, expected_response, expected_types)


async def test_upsert_sandbox_scenario(client: Vellum, async_client: AsyncVellum) -> None:
    expected_response: typing.Any = {
        "label": "label",
        "inputs": [{"type": "STRING", "value": "value", "input_variable_id": "input_variable_id"}],
        "id": "id",
    }
    expected_types: typing.Any = {
        "label": None,
        "inputs": ("list", {0: {"type": None, "value": None, "input_variable_id": None}}),
        "id": None,
    }
    response = client.sandboxes.upsert_sandbox_scenario(
        id="id",
        label="Scenario 1",
        inputs=[
            NamedScenarioInputStringVariableValueRequest(value="Hello, world!", name="var_1"),
            NamedScenarioInputStringVariableValueRequest(value="Why hello, there!", name="var_2"),
        ],
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.sandboxes.upsert_sandbox_scenario(
        id="id",
        label="Scenario 1",
        inputs=[
            NamedScenarioInputStringVariableValueRequest(value="Hello, world!", name="var_1"),
            NamedScenarioInputStringVariableValueRequest(value="Why hello, there!", name="var_2"),
        ],
    )
    validate_response(async_response, expected_response, expected_types)


async def test_delete_sandbox_scenario(client: Vellum, async_client: AsyncVellum) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.sandboxes.delete_sandbox_scenario(id="id", scenario_id="scenario_id")  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.sandboxes.delete_sandbox_scenario(id="id", scenario_id="scenario_id")  # type: ignore[func-returns-value]
        is None
    )
