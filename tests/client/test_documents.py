# This file was auto-generated by Fern from our API Definition.

from vellum import Vellum
from vellum import AsyncVellum
import typing
from .utilities import validate_response


async def test_list_(client: Vellum, async_client: AsyncVellum) -> None:
    expected_response: typing.Any = {
        "count": 123,
        "next": "http://api.example.org/accounts/?offset=400&limit=100",
        "previous": "http://api.example.org/accounts/?offset=200&limit=100",
        "results": [
            {
                "id": "id",
                "external_id": "external_id",
                "last_uploaded_at": "2024-01-15T09:30:00Z",
                "label": "label",
                "processing_state": "QUEUED",
                "processing_failure_reason": "EXCEEDED_CHARACTER_LIMIT",
                "status": "ACTIVE",
                "keywords": ["keywords"],
                "metadata": {"key": "value"},
                "document_to_document_indexes": [{"id": "id", "document_index_id": "document_index_id"}],
            }
        ],
    }
    expected_types: typing.Any = {
        "count": "integer",
        "next": None,
        "previous": None,
        "results": (
            "list",
            {
                0: {
                    "id": None,
                    "external_id": None,
                    "last_uploaded_at": "datetime",
                    "label": None,
                    "processing_state": None,
                    "processing_failure_reason": None,
                    "status": None,
                    "keywords": ("list", {0: None}),
                    "metadata": ("dict", {0: (None, None)}),
                    "document_to_document_indexes": ("list", {0: {"id": None, "document_index_id": None}}),
                }
            },
        ),
    }
    response = client.documents.list()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.documents.list()
    validate_response(async_response, expected_response, expected_types)


async def test_retrieve(client: Vellum, async_client: AsyncVellum) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "external_id": "external_id",
        "last_uploaded_at": "2024-01-15T09:30:00Z",
        "label": "label",
        "processing_state": "QUEUED",
        "status": "ACTIVE",
        "original_file_url": "original_file_url",
        "processed_file_url": "processed_file_url",
        "document_to_document_indexes": [
            {
                "id": "id",
                "document_index_id": "document_index_id",
                "indexing_state": "AWAITING_PROCESSING",
                "extracted_text_file_url": "extracted_text_file_url",
            }
        ],
        "metadata": {"key": "value"},
    }
    expected_types: typing.Any = {
        "id": None,
        "external_id": None,
        "last_uploaded_at": "datetime",
        "label": None,
        "processing_state": None,
        "status": None,
        "original_file_url": None,
        "processed_file_url": None,
        "document_to_document_indexes": (
            "list",
            {0: {"id": None, "document_index_id": None, "indexing_state": None, "extracted_text_file_url": None}},
        ),
        "metadata": ("dict", {0: (None, None)}),
    }
    response = client.documents.retrieve(id="id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.documents.retrieve(id="id")
    validate_response(async_response, expected_response, expected_types)


async def test_destroy(client: Vellum, async_client: AsyncVellum) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.documents.destroy(id="id")  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.documents.destroy(id="id")  # type: ignore[func-returns-value]
        is None
    )


async def test_partial_update(client: Vellum, async_client: AsyncVellum) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "external_id": "external_id",
        "last_uploaded_at": "2024-01-15T09:30:00Z",
        "label": "label",
        "processing_state": "QUEUED",
        "status": "ACTIVE",
        "original_file_url": "original_file_url",
        "processed_file_url": "processed_file_url",
        "document_to_document_indexes": [
            {
                "id": "id",
                "document_index_id": "document_index_id",
                "indexing_state": "AWAITING_PROCESSING",
                "extracted_text_file_url": "extracted_text_file_url",
            }
        ],
        "metadata": {"key": "value"},
    }
    expected_types: typing.Any = {
        "id": None,
        "external_id": None,
        "last_uploaded_at": "datetime",
        "label": None,
        "processing_state": None,
        "status": None,
        "original_file_url": None,
        "processed_file_url": None,
        "document_to_document_indexes": (
            "list",
            {0: {"id": None, "document_index_id": None, "indexing_state": None, "extracted_text_file_url": None}},
        ),
        "metadata": ("dict", {0: (None, None)}),
    }
    response = client.documents.partial_update(id="id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.documents.partial_update(id="id")
    validate_response(async_response, expected_response, expected_types)
