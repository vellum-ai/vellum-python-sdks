# This file was auto-generated by Fern from our API Definition.

from vellum import Vellum
from vellum import AsyncVellum
import typing
from vellum import TestSuiteRunDeploymentReleaseTagExecConfigRequest
from vellum import TestSuiteRunDeploymentReleaseTagExecConfigDataRequest
from .utilities import validate_response


async def test_create(client: Vellum, async_client: AsyncVellum) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "created": "2024-01-15T09:30:00Z",
        "test_suite": {"id": "id", "history_item_id": "history_item_id", "label": "label"},
        "state": "QUEUED",
        "exec_config": {
            "type": "DEPLOYMENT_RELEASE_TAG",
            "data": {"deployment_id": "deployment_id", "tag": "tag"},
            "test_case_ids": ["test_case_ids"],
        },
    }
    expected_types: typing.Any = {
        "id": None,
        "created": "datetime",
        "test_suite": {"id": None, "history_item_id": None, "label": None},
        "state": None,
        "exec_config": {
            "type": None,
            "data": {"deployment_id": None, "tag": None},
            "test_case_ids": ("list", {0: None}),
        },
    }
    response = client.test_suite_runs.create(
        exec_config=TestSuiteRunDeploymentReleaseTagExecConfigRequest(
            data=TestSuiteRunDeploymentReleaseTagExecConfigDataRequest(deployment_id="deployment_id")
        )
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.test_suite_runs.create(
        exec_config=TestSuiteRunDeploymentReleaseTagExecConfigRequest(
            data=TestSuiteRunDeploymentReleaseTagExecConfigDataRequest(deployment_id="deployment_id")
        )
    )
    validate_response(async_response, expected_response, expected_types)


async def test_retrieve(client: Vellum, async_client: AsyncVellum) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "created": "2024-01-15T09:30:00Z",
        "test_suite": {"id": "id", "history_item_id": "history_item_id", "label": "label"},
        "state": "QUEUED",
        "exec_config": {
            "type": "DEPLOYMENT_RELEASE_TAG",
            "data": {"deployment_id": "deployment_id", "tag": "tag"},
            "test_case_ids": ["test_case_ids"],
        },
    }
    expected_types: typing.Any = {
        "id": None,
        "created": "datetime",
        "test_suite": {"id": None, "history_item_id": None, "label": None},
        "state": None,
        "exec_config": {
            "type": None,
            "data": {"deployment_id": None, "tag": None},
            "test_case_ids": ("list", {0: None}),
        },
    }
    response = client.test_suite_runs.retrieve(id="id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.test_suite_runs.retrieve(id="id")
    validate_response(async_response, expected_response, expected_types)


async def test_list_executions(client: Vellum, async_client: AsyncVellum) -> None:
    expected_response: typing.Any = {
        "count": 123,
        "next": "http://api.example.org/accounts/?offset=400&limit=100",
        "previous": "http://api.example.org/accounts/?offset=200&limit=100",
        "results": [
            {
                "id": "id",
                "test_case_id": "test_case_id",
                "outputs": [{"name": "name", "type": "STRING", "output_variable_id": "output_variable_id"}],
                "metric_results": [{"metric_id": "metric_id", "outputs": [{"type": "STRING", "name": "name"}]}],
            }
        ],
    }
    expected_types: typing.Any = {
        "count": "integer",
        "next": None,
        "previous": None,
        "results": (
            "list",
            {
                0: {
                    "id": None,
                    "test_case_id": None,
                    "outputs": ("list", {0: {"name": None, "type": None, "output_variable_id": None}}),
                    "metric_results": (
                        "list",
                        {0: {"metric_id": None, "outputs": ("list", {0: {"type": None, "name": None}})}},
                    ),
                }
            },
        ),
    }
    response = client.test_suite_runs.list_executions(id="id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.test_suite_runs.list_executions(id="id")
    validate_response(async_response, expected_response, expected_types)
