# This file was auto-generated by Fern from our API Definition.

from vellum import Vellum
from vellum import AsyncVellum
import typing
from .utilities import validate_response
from vellum import NamedTestCaseStringVariableValueRequest
from vellum import NamedTestCaseArrayVariableValueRequest
from vellum import StringVellumValueRequest


async def test_list_test_suite_test_cases(client: Vellum, async_client: AsyncVellum) -> None:
    expected_response: typing.Any = {
        "count": 123,
        "next": "http://api.example.org/accounts/?offset=400&limit=100",
        "previous": "http://api.example.org/accounts/?offset=200&limit=100",
        "results": [
            {
                "id": "id",
                "external_id": "external_id",
                "label": "label",
                "input_values": [{"variable_id": "variable_id", "name": "name", "type": "STRING"}],
                "evaluation_values": [{"variable_id": "variable_id", "name": "name", "type": "STRING"}],
            }
        ],
    }
    expected_types: typing.Any = {
        "count": "integer",
        "next": None,
        "previous": None,
        "results": (
            "list",
            {
                0: {
                    "id": None,
                    "external_id": None,
                    "label": None,
                    "input_values": ("list", {0: {"variable_id": None, "name": None, "type": None}}),
                    "evaluation_values": ("list", {0: {"variable_id": None, "name": None, "type": None}}),
                }
            },
        ),
    }
    response = client.test_suites.list_test_suite_test_cases(id="id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.test_suites.list_test_suite_test_cases(id="id")
    validate_response(async_response, expected_response, expected_types)


async def test_upsert_test_suite_test_case(client: Vellum, async_client: AsyncVellum) -> None:
    expected_response: typing.Any = {
        "id": "id",
        "external_id": "external_id",
        "label": "label",
        "input_values": [{"variable_id": "variable_id", "name": "name", "type": "STRING", "value": "value"}],
        "evaluation_values": [{"variable_id": "variable_id", "name": "name", "type": "STRING", "value": "value"}],
    }
    expected_types: typing.Any = {
        "id": None,
        "external_id": None,
        "label": None,
        "input_values": ("list", {0: {"variable_id": None, "name": None, "type": None, "value": None}}),
        "evaluation_values": ("list", {0: {"variable_id": None, "name": None, "type": None, "value": None}}),
    }
    response = client.test_suites.upsert_test_suite_test_case(
        id_="id",
        label="Test Case 1",
        input_values=[NamedTestCaseStringVariableValueRequest(value="What are your favorite colors?", name="var_1")],
        evaluation_values=[
            NamedTestCaseArrayVariableValueRequest(
                value=[
                    StringVellumValueRequest(value="Red"),
                    StringVellumValueRequest(value="Green"),
                    StringVellumValueRequest(value="Blue"),
                ],
                name="var_2",
            )
        ],
    )
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.test_suites.upsert_test_suite_test_case(
        id_="id",
        label="Test Case 1",
        input_values=[NamedTestCaseStringVariableValueRequest(value="What are your favorite colors?", name="var_1")],
        evaluation_values=[
            NamedTestCaseArrayVariableValueRequest(
                value=[
                    StringVellumValueRequest(value="Red"),
                    StringVellumValueRequest(value="Green"),
                    StringVellumValueRequest(value="Blue"),
                ],
                name="var_2",
            )
        ],
    )
    validate_response(async_response, expected_response, expected_types)


async def test_delete_test_suite_test_case(client: Vellum, async_client: AsyncVellum) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert (
        client.test_suites.delete_test_suite_test_case(id="id", test_case_id="test_case_id")  # type: ignore[func-returns-value]
        is None
    )

    assert (
        await async_client.test_suites.delete_test_suite_test_case(id="id", test_case_id="test_case_id")  # type: ignore[func-returns-value]
        is None
    )
